<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 ! 
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/CDDLv1_0.txt
 ! or http://forgerock.org/license/CDDLv1.0.html.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 ! 
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/CDDLv1_0.txt.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2011-2013 ForgeRock AS
 ! -->
<stax>

  <!-- Definition of Test Cases -->

  <!--- Test Cases : Basic : Operations -->
 
  <!--- Test Case information
  #@TestMarker          Basic: operations
  #@TestName            Basic: operations 
  #@TestID              basic_operations_000
  #@TestPurpose         Preamble
  #@TestPreamble        Common Setup
  #@TestStep            Import sample data
  #@TestPostamble       Common Cleanup
  #@TestResult          Test is successful if the result code is 0
  -->   
  <function name="basic_operations_000" scope="local">
    <testcase name="getTestCaseName('Preamble')">
      <sequence>
        <call function="'testCase_Preamble'"/>
      
        <script>
          ldifTemplate = '%s/import_Entries_100k.template' % remote.temp
        </script>
      
        <message>
          'Preamble: Stop DS running on port %s' % (DIRECTORY_INSTANCE_PORT)
        </message>
    
        <call function="'StopDsWithScript'">
        { 'location'    : STAF_REMOTE_HOSTNAME,
          'dsHost'      : DIRECTORY_INSTANCE_HOST,
          'dsAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
          'dsBindDN'    : DIRECTORY_INSTANCE_DN,
          'dsBindPwd'   : DIRECTORY_INSTANCE_PSWD }
        </call>
    
        <!-- Check if 'ldifFile' exists -->
        <call function="'GetEntry'">
          {
          'location'  : STAF_REMOTE_HOSTNAME ,
          'entry'     : ldifFile ,
          'attribute' : 'TYPE'
          }
        </call>
        <if expr="RC == 48">
          <sequence>
            <message>
              'Preamble: File %s does not exist, create it' % ldifFile
            </message>
    
            <message>
              'Preamble: Make an make-ldif template file'
            </message>
    
            <call function="'MakeAMakeLdifTemplate'">
              {
              'numEntries'           : numberOfEntries ,
              'additionalAttributes' : True ,
              'extraLine'            : 'userpassword: password' ,
              'templateFile'         : ldifTemplate ,
              'templateLocation'     : STAF_REMOTE_HOSTNAME
              }
            </call>
    
            <message>
              'Preamble: Make the ldif file'
            </message>
    
            <call function="'MakeLdifWithScript'">
              {
              'location'     : STAF_REMOTE_HOSTNAME ,
              'templateFile' : ldifTemplate ,
              'ldifFile'     : ldifFile
              }
            </call>
          </sequence>
          <else>
            <message>
              'Preamble: File %s exists, do nothing' % ldifFile
            </message>
          </else>
        </if>
    
        <message>
          'Preamble: Import the ldif file'
        </message>
    
        <call function="'ImportLdifWithScript'">
          {
          'location'   : STAF_REMOTE_HOSTNAME ,
          'ldifFile'   : ldifFile ,
          'backEnd'    : 'userRoot'
          }
        </call>
    
        <message>
          'Preamble: Start DS to run on port %s' % DIRECTORY_INSTANCE_PORT
        </message>
    
        <call function="'StartDsWithScript'">
          { 'location' : STAF_REMOTE_HOSTNAME }
        </call>
    
        <call function="'testCase_Postamble'"/>
    
      </sequence>
    </testcase>
  </function>
  
  <!--- Test Case information
  #@TestMarker          Basic: operations
  #@TestName            Basic: operations 
  #@TestID              basic_operations_001
  #@TestPurpose         Verify basic LDAP authentication operations
  #@TestPreamble        Common Setup
  #@TestStep            Run LDAP authentication operations
  #@TestPostamble       Common Cleanup
  #@TestResult          Test is successful if the result code is 0
  -->   
  <function name="basic_operations_001" scope="local">
    <testcase name="getTestCaseName('authrate')">                     
      <sequence> 
        <try>
          <sequence>                
            <call function="'testCase_Preamble'"/>
            <message>
               'Test Name = %s' % STAXCurrentTestcase
            </message>

            <call function="'testStep'">
              { 'stepMessage' : 'Authrate.' }
            </call>

            <timer duration="timerDuration">
              <sequence>
                <call function="'authRate'">
                  { 'dsInstanceHost' : server.host,
                    'dsInstancePort' : server.port,
                    'dsInstanceDn'   : '"uid=user.%s,ou=People,dc=com"',
                    'dsInstancePswd' : 'password',
                    'extraParams'    : '-g "rand(0,%s)" -c 10' % (numberOfEntries - 1),
                    'outputFile'     : 'authrate.res',
                    'outputPath'     : remote.temp
                  }
                </call>
              </sequence>
            </timer>
            
            <call function="'getFile'">
              { 'location'    : STAF_REMOTE_HOSTNAME ,
                'filename'    : '%s/authrate.res' % remote.temp
              }
            </call>
            <message>
              cmdResult
            </message>

            <script>
              import re
              f=open('%s/authrate.res' % remote.temp)
              errorFound=False
              for line in f.readlines():
                line = line.replace('\n','')
                if re.search('^[0-9].*', line) is not None:
                  if line.split()[7] != '0.0':
                    errorFound=True
            </script>
            <if expr="errorFound == False">
              <tcstatus result="'pass'"/>
              <else>
              <sequence>
                <message>'Error found during authrate'</message>
                <tcstatus result="'fail'"/>
              </sequence>
              </else>
            </if>

            <call function="'testStep'">
              { 'stepMessage' : 'Do search on the server.' }
            </call>
            
            <call function="'ldapSearchWithScript'">
              {
              'dsInstanceHost'   : server.host,
              'dsInstancePort'   : server.port,
              'dsInstanceDn'     : server.dn,
              'dsInstancePswd'   : server.password,
              'dsBaseDN'         : 'dc=com',
              'dsFilter'         : 'objectclass=*',
              'dsAttributes'     : 'dn'
              }                
            </call>
          </sequence>
  
          <catch exception="'STAXException'" typevar="eType" var="eInfo">
            <message log="1" level="'fatal'">
              '%s: Test failed. eInfo(%s)' % (eType,eInfo)
            </message>
          </catch>
          <finally>
            <sequence>
              <call function="'testCase_Postamble'"/>
            </sequence>
          </finally>
        </try>
      </sequence>
    </testcase>
  </function>

  <!--- Test Case information
  #@TestMarker          Basic: operations
  #@TestName            Basic: operations 
  #@TestID              basic_operations_002
  #@TestPurpose         Verify basic LDAP search operations
  #@TestPreamble        Common Setup
  #@TestStep            Run LDAP search operations
  #@TestPostamble       Common Cleanup
  #@TestResult          Test is successful if the result code is 0
  -->   
  <function name="basic_operations_002" scope="local">
    <testcase name="getTestCaseName('searchrate')">                     
      <sequence> 
        <try>
          <sequence>                
            <call function="'testCase_Preamble'"/>
            <message>
               'Test Name = %s' % STAXCurrentTestcase
            </message>

            <call function="'testStep'">
              { 'stepMessage' : 'SearchRate.' }
            </call>
            
            <timer duration="timerDuration">
              <sequence>
                <call function="'searchRate'">
                  { 'dsInstanceHost' : server.host,
                    'dsInstancePort' : server.port,
                    'dsInstanceDn'   : server.dn,
                    'dsInstancePswd' : server.password,
                    'dsBaseDN'       : '"uid=user.%s,ou=People,dc=com"',
                    'extraParams'    : '-g "rand(0,%s)" -c 10 "objectclass=*"' % (numberOfEntries - 1),
                    'outputFile'     : 'searchrate.res',
                    'outputPath'     : remote.temp
                  }
                </call>
              </sequence>
            </timer>

            <call function="'getFile'">
              { 'location'    : STAF_REMOTE_HOSTNAME ,
                'filename'    : '%s/searchrate.res' % remote.temp
              }
            </call>
            <message>
              cmdResult
            </message>
            
            <script>
              import re
              f=open('%s/searchrate.res' % remote.temp)
              errorFound=False
              for line in f.readlines():
                line = line.replace('\n','')
                if re.search('^[0-9].*', line) is not None:
                  if line.split()[7] != '0.0':
                    errorFound=True
            </script>
            <if expr="errorFound == False">
              <tcstatus result="'pass'"/>
              <else>
                <sequence>
                  <message>'Error found during searchrate'</message>
                  <tcstatus result="'fail'"/>
                </sequence>
              </else>
            </if>
            
            <call function="'testStep'">
              { 'stepMessage' : 'Do search on the server.' }
            </call>
            
            <call function="'ldapSearchWithScript'">
              {
              'dsInstanceHost'   : server.host,
              'dsInstancePort'   : server.port,
              'dsInstanceDn'     : server.dn,
              'dsInstancePswd'   : server.password,
              'dsBaseDN'         : 'dc=com',
              'dsFilter'         : 'objectclass=*',
              'dsAttributes'     : 'dn'
              }                
            </call>
          </sequence>
  
          <catch exception="'STAXException'" typevar="eType" var="eInfo">
            <message log="1" level="'fatal'">
              '%s: Test failed. eInfo(%s)' % (eType,eInfo)
            </message>
          </catch>
          <finally>
            <sequence>
              <call function="'testCase_Postamble'"/>
            </sequence>
          </finally>
        </try>
      </sequence>
    </testcase>
  </function>

  <!--- Test Case information
  #@TestMarker          Basic: operations
  #@TestName            Basic: operations 
  #@TestID              basic_operations_003
  #@TestPurpose         Verify basic LDAP modify operations
  #@TestPreamble        Common Setup
  #@TestStep            Run LDAP modify operations
  #@TestPostamble       Common Cleanup
  #@TestResult          Test is successful if the result code is 0
  -->   
  <function name="basic_operations_003" scope="local">
    <testcase name="getTestCaseName('modrate')">                  
      <sequence> 
        <try>
          <sequence>                
            <call function="'testCase_Preamble'"/>
            <message>
               'Test Name = %s' % STAXCurrentTestcase
            </message>

            <call function="'testStep'">
              { 'stepMessage' : 'ModRate.' }
            </call>
            
            <timer duration="timerDuration">
              <sequence>
                <call function="'modRate'">
                  { 'dsInstanceHost' : server.host,
                    'dsInstancePort' : server.port,
                    'dsInstanceDn'   : server.dn,
                    'dsInstancePswd' : server.password,
                    'dsBaseDN'       : '"uid=user.%s,ou=People,dc=com"',
                    'extraParams'    : '-g "rand(0,%s)" -g "randstr(40)" -c 10' % (numberOfEntries - 1),
                    'attribute'      : 'description' ,
                    'formatString'   : '"%s"',
                    'outputFile'     : 'modrate.res',
                    'outputPath'     : remote.temp
                  }
                </call>
              </sequence>
            </timer>
            
            <call function="'getFile'">
              { 'location'    : STAF_REMOTE_HOSTNAME ,
                'filename'    : '%s/modrate.res' % remote.temp
              }
            </call>
            <message>
              cmdResult
            </message>

            <script>
              import re
              f=open('%s/modrate.res' % remote.temp)
              errorFound=False
              for line in f.readlines():
                line = line.replace('\n','')
                if re.search('^[0-9].*', line) is not None:
                  if line.split()[7] != '0.0':
                    errorFound=True
            </script>
            <if expr="errorFound == False">
              <tcstatus result="'pass'"/>
              <else>
                <sequence>
                  <message>'Error found during modrate'</message>
                  <tcstatus result="'fail'"/>
                </sequence>
              </else>
            </if>

            <call function="'testStep'">
              { 'stepMessage' : 'Do search on the server.' }
            </call>
            
            <call function="'ldapSearchWithScript'">
              {
              'dsInstanceHost'   : server.host,
              'dsInstancePort'   : server.port,
              'dsInstanceDn'     : server.dn,
              'dsInstancePswd'   : server.password,
              'dsBaseDN'         : 'dc=com',
              'dsFilter'         : 'objectclass=*',
              'dsAttributes'     : 'dn'
              }                
            </call>
          </sequence>
  
          <catch exception="'STAXException'" typevar="eType" var="eInfo">
            <message log="1" level="'fatal'">
              '%s: Test failed. eInfo(%s)' % (eType,eInfo)
            </message>
          </catch>
          <finally>
            <sequence>
              <call function="'testCase_Postamble'"/>
            </sequence>
          </finally>
        </try>
      </sequence>
    </testcase>
  </function>

  <!--- Test Case information
  #@TestMarker          Basic: operations
  #@TestName            Basic: operations 
  #@TestID              basic_operations_004
  #@TestPurpose         Verify basic LDAP modify operations
  #@TestPreamble        Common Setup
  #@TestStep            Run LDAP add/delete operations
  #@TestPostamble       Common Cleanup
  #@TestResult          Test is successful if the result code is 0
  -->   
  <function name="basic_operations_004" scope="local">
    <testcase name="getTestCaseName('addrate-delrate')">                  
      <sequence> 
        <try>
          <sequence>                
            <call function="'testCase_Preamble'"/>
            <message>
               'Test Name = %s' % STAXCurrentTestcase
            </message>

            <parallel>
              <block name="'addRate'">
                <sequence>
                  <call function="'testStep'">
                    { 'stepMessage' : 'AddRate.' }
                  </call>
                    
                    <timer duration="timerDuration">
                      <sequence>
                        <call function="'addRate'">
                          { 'dsInstanceHost' : server.host,
                            'dsInstancePort' : server.port,
                            'dsInstanceDn'   : server.dn,
                            'dsInstancePswd' : server.password,
                            'templateFile'   : addTemplate,
                            'extraParams'    : '-g "inc(%s,%s)" -g "randstr(5)" -g "randstr(5)" -g "randstr(5)" -g "randstr(5)" -m 100000' \
                                               % (numberOfEntries, 2 * numberOfEntries),
                            'outputFile'     : 'addrate.res',
                            'outputPath'     : remote.temp
                          }
                        </call>
                      </sequence>
                    </timer>
                    
                    <call function="'getFile'">
                      { 'location'    : STAF_REMOTE_HOSTNAME ,
                        'filename'    : '%s/addrate.res' % remote.temp
                      }
                    </call>
                    <message>
                      cmdResult
                    </message>
                  
                  <script>
                    import re
                    f=open('%s/addrate.res' % remote.temp)
                    errorFound=False
                    for line in f.readlines():
                      line = line.replace('\n','')
                      if re.search('^[0-9].*', line) is not None:
                        if line.split()[7] != '0.0':
                          errorFound=True
                  </script>
                  <if expr="errorFound == False">
                    <tcstatus result="'pass'"/>
                    <else>
                      <sequence>
                        <message>'Error found during addrate'</message>
                        <tcstatus result="'fail'"/>
                      </sequence>
                    </else>
                  </if>
                </sequence>
              </block>
              
              <block name="'delRate'">
               <sequence>
                  <call function="'testStep'">
                    { 'stepMessage' : 'DelRate.' }
                  </call>
      
                  <timer duration="timerDuration">
                    <sequence>
                      <call function="'delRate'">
                        { 'dsInstanceHost' : server.host,
                          'dsInstancePort' : server.port,
                          'dsInstanceDn'   : server.dn,
                          'dsInstancePswd' : server.password,
                          'dsBaseDN'       : '"uid=user.%s,ou=People,dc=com"',
                          'extraParams'    : '-g "inc(0,%s)" -m 100000' % (numberOfEntries - 1),
                          'outputFile'     : 'delrate.res',
                          'outputPath'     : remote.temp
                        }
                      </call>
                  </sequence>
                  </timer>
                
                  <call function="'getFile'">
                    { 'location'    : STAF_REMOTE_HOSTNAME ,
                      'filename'    : '%s/delrate.res' % remote.temp
                    }
                  </call>
                  <message>
                    cmdResult
                  </message>
            
                  <script>
                    import re
                    f=open('%s/delrate.res' % remote.temp)
                    errorFound=False
                    for line in f.readlines():
                      line = line.replace('\n','')
                      if re.search('^[0-9].*', line) is not None:
                        if line.split()[7] != '0.0':
                          errorFound=True
                  </script>
                  <if expr="errorFound == False">
                    <tcstatus result="'pass'"/>
                    <else>
                      <sequence>
                        <message>'Error found during delrate'</message>
                        <tcstatus result="'fail'"/>
                      </sequence>
                    </else>
                  </if>
               </sequence>
              </block>
            </parallel>
            
            <call function="'testStep'">
              { 'stepMessage' : 'Do search on the server and check number of entries.' }
            </call>
            
            <call function="'ldapSearchWithScript'">
              {
              'dsInstanceHost'   : server.host,
              'dsInstancePort'   : server.port,
              'dsInstanceDn'     : server.dn,
              'dsInstancePswd'   : server.password,
              'dsCountEntries'   : 'True' ,
              'dsBaseDN'         : 'dc=com',
              'dsFilter'         : 'objectclass=*',
              'dsAttributes'     : 'dn',
              'outputFile'       : 'ldapsearch_add_del.out',
              'outputPath'       : remote.temp
              }                
            </call>
            
            <call function="'grep'">
              {
              'location'  : STAF_REMOTE_HOSTNAME ,
              'filename'  : '%s/ldapsearch_add_del.out' % remote.temp ,
              'testString': 'Total number of matching entries: 100002'
              }
            </call>
          </sequence>
  
          <catch exception="'STAXException'" typevar="eType" var="eInfo">
            <message log="1" level="'fatal'">
              '%s: Test failed. eInfo(%s)' % (eType,eInfo)
            </message>
          </catch>
          <finally>
            <sequence>
              <call function="'testCase_Postamble'"/>
            </sequence>
          </finally>
        </try>
      </sequence>
    </testcase>
  </function>
    
</stax>
