<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2007-2010 Sun Microsystems, Inc.
 !      Portions Copyright 2013 ForgeRock AS
 ! -->
<stax>
  <defaultcall function="main_replication"/>
  <function name="main_replication">
    <function-list-args>
      <function-required-arg name="STAXParentID"/>
    </function-list-args>
    <sequence>
      
      <try>
        
        <block name="'replication'">
          <sequence>
            <!--- Load the job environment for the test group execution -->
            <import machine="STAF_LOCAL_HOSTNAME"
                    file="'%s/environment.xml' % TESTS_FUNCTIONS_DIR" />
            <call function="'loadJobEnvironment'">
                 { 'parent' : STAXParentID }
            </call>
            <script>
              CurrentTestPath['group']='replication'
            </script>
            <call function="'testGroup_Preamble'"/>            
  
            <!-- List of replication test suites to run -->
            <script>
              suiteList = []
              suiteList.append('totalupdate')
              suiteList.append('binarycopy')
              suiteList.append('ldifimport')
              suiteList.append('resynchronization')
              suiteList.append('basic')
              suiteList.append('schema')
              suiteList.append('failover')
              suiteList.append('encryption')
              suiteList.append('changelog')
              suiteList.append('conflict')
              suiteList.append('externalchangelog')
              suiteList.append('externalchangelog_consistency')
              suiteList.append('aci')
              
              globalAssuredReplication = None
              
              if (REPLICATION_SPLIT_SERVERS == 'true'):
                globalSplitServers = True
              else:
                globalSplitServers = None
            </script>
            
            <iterate var="_suite" in="suiteList" >
              <try>
                <sequence>
                  <import machine="STAF_LOCAL_HOSTNAME"
                          file="'%s/testcases/replication/%s/%s.xml' % 
                            (TESTS_DIR,_suite,_suite)"/>
                  <call function="'replication_%s'% _suite" />
                </sequence>
                
                <catch exception="'STAFException.TestSuite.SetupException'">
                  <message log="1" level="'fatal'">
                    'Setup of test suite %s failed.' % _suite
                  </message>
                </catch>
                
                <catch exception="'STAFException.TestSuite.MainException'">
                  <message log="1" level="'fatal'">
                    'Main part of test suite %s failed.' % _suite
                  </message>
                </catch>
                
                <catch exception="'STAFException.TestSuite.CleanupException'">
                  <message log="1" level="'fatal'">
                    'Cleanup of test suite %s failed.' % _suite
                  </message>
                </catch>
              </try>
            </iterate>
            
          </sequence>
        </block>
          
        <catch exception="'STAXException.TestGroupException'">
          <message log="1" level="'fatal'">
            'Execution of Test Group Failed'
          </message>
        </catch>
        
        <finally>
          <!-- Test Group postamble -->
          <call function="'testGroup_Postamble'"/>
        </finally>
        
      </try>
      
    </sequence>
  </function>
</stax>
