<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2007-2009 Sun Microsystems, Inc.
 ! -->
<stax>
  <defaultcall function="logging_writer"/>
  <function name="logging_writer" scope="local">
   <block name="STAXCurrentFunction">
    <try>  
    <sequence>
      <script>
        CurrentTestPath['suite']=STAXCurrentFunction
      </script>
      <call function="'testSuite_Preamble'"/>
      
      <call function="'common_setup'">
        {
          'quickStart'    : True ,
          'startServer'   : True  ,
          'stopServer'    : False
        }
      </call>

      <!--- Test Suite information
        #@TestSuiteName       Basic tests on logging
        #@TestSuitePurpose    Check the log of information under Access or Debug files is correctly done
        #@TestSuiteID         Logging
        #@TestSuiteGroup      Logging
        #@TestGroup           Logging
        #@TestScript          logging_writer.xml
        #@TestHTMLLink        http://opends.dev.java.net/
      -->      

      <!-- #################################### -->
      <!--
        #@TestMarker      Basic tests on logging
        #@TestName        Basic test on access log publisher
        #@TestIssue       
        #@TestPurpose     Check informations are correclty logged under Access log files.
        #@TestPurpose     the Access log publisher is configured with asynchronous mode and auto-flush
        #@TestPreamble    none
        #@TestStep        Set the publisher Access Logger's properties to be an asynchronous mode
        #@TestStep        Set the auto-flush to TRUE
        #@TestStep        Set the append property to false
        #@TestStep        Configure the Size Limit rotation policy with a Max size to 1mb
        #@TestStep        Execute ldapsearch request until the log are writen in the disk
        #@TestPostamble   none
        #@TestResult      The recors must be written to disk after each operation
            -->
      <!-- #################################### -->
      
      <testcase name="getTestCaseName('Synchronous mode Access logger')">
        <sequence>
          <call function="'testCase_Preamble'"/>
          <message>
            '----  Check the Synchronous mode for Access loggers -----'
          </message>
          <message>
            '  asynchronous:false  -  auto-flush:true  -  append:false -  buffer-size:20kb '
          </message>
          <message>'------  set properties --' </message>
          <call function="'dsconfig'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN ,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD ,
              'subcommand'     : 'set-log-publisher-prop',
              'objectType'     : 'publisher-name',
              'objectName'     :  'File-Based Access Logger',
              'optionsString'  : '--set auto-flush:true --set append:false --set asynchronous:false --set buffer-size:20kb',
              'expectedRC'     : 0
            }
          </call>
          
          <call function="'dsconfig'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'subcommand'     : 'set-log-rotation-policy-prop',
              'objectType'     : 'policy-name',
              'objectName'     : 'Size Limit Rotation Policy',
              'optionsString'  : '--set file-size-limit:1mb',
              'expectedRC'     : 0
            } 
          </call>
          
          <!--  Starting loop -->
          <script>
            listName=[]
            listSize=[]
            cpt=0
          </script>
          
          <!--  Execute ldapsearch until logs are written to disk -->
          <!-- as auto-flush is true, the logs must be written after each operation  -->
          <loop from="1" to="5" until="RC != 0">
            <sequence>
              <message>'###########################'</message>       
              <message>'                  LOOP %s :' % cpt </message>
              <message>'###########################'</message>
              <message>'--- Execute a Search request ---'</message>  
              
              <call function="'ldapSearchWithScript'">
                { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
                  'dsInstancePort' : DIRECTORY_INSTANCE_PORT,
                  'dsBaseDN'       : DIRECTORY_INSTANCE_SFX,
                  'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
                  'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
                  'dsFilter'       : 'objectclass=*',
                  'dsScope'        : 'base',
                  'expectedRC'     : 0
                }
              </call>
              
              <call function="'dsconfigGet'">
                { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
                  'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
                  'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
                  'objectName'     : 'log-publisher',
                  'propertyType'   : 'publisher',
                  'propertyName'   : 'File-Based Access Logger',
                  'attributeName'  : 'rotation-policy'
                }
              </call>
              
              <message>'--- Check log files ---'</message>  
              <call function="'listFolder'">
                { 'location'   : '%s' % (DIRECTORY_INSTANCE_HOST),
                  'foldername' : '%s/%s/logs' % (DIRECTORY_INSTANCE_DIR,OPENDSNAME),
                  'filename'   : 'access'
                 }
              </call>
              
              <if expr="len(cmdResult) > 0">
                <sequence>                  
                  <iterate var="result" in="cmdResult">
                    <sequence>
                      <script>
                        logname=result["name"]
                        logsize=result["size"]
                        found=0
                      </script>
                      <message>
                        'log file status for file  %s is %s ' % (logname,logsize)
                      </message>
                      <script>
                        for currentLog in listName:
                          if currentLog == logname:
                            found=1
                            currentIndex=listName.index(currentLog)
                            currentSize=listSize[currentIndex]
                            if currentSize != logsize:
                              RC=1
                              listSize[currentIndex]=logsize
                              break
                          
                        if found == 0:
                          listName.append(logname)
                          listSize.append(logsize)
                      </script>
                    </sequence>
                  </iterate>
                </sequence>
              </if>
              <message>
                'The new log file status is : %s : %s' % (listName,listSize)
              </message>
              <script>
                cpt=cpt+1
              </script>
            </sequence>
          </loop>
          <message>
            'The log file status of the file "%s" has changed ' % logname
          </message>
          
          <!-- Check log file -->
          <!-- records must be writen after each operation -->
          <!-- we should exit the loop after the first ldapsearch -->
          <if expr="cpt != 2">
            <sequence>
              <message>
                'ERROR.  The writer are not flushed after every log records'
              </message>
              <call function="'testFailed'"/>
            </sequence>
            <else>
              <sequence>
                <message>
                  'SUCCESS. The writer are flushed after every log records'
                </message>
                <call function="'testPassed'"/>
              </sequence>
            </else>
          </if>
          <call function="'testCase_Postamble'"/>
        </sequence>
      </testcase>
      
      <!-- #################################### -->
      <!--
          #@TestMarker       Basic tests on logging
          #@TestName         Basic test on Debug log publisher
          #@TestIssue        
          #@TestPurpose      Check informations are correclty logged under Debug log files.
          #@TestPreamble     none
          #@TestStep         Enabled the Debug  Logger
          #@TestStep         Define a specific log file for debug message 
          #@TestStep         set the debug-log-level to All
          #@TestStep         Restart the server
          #@TestStep         Execute a ldapsearch request
          #@TestPostamble    none
          #@TestResult       Check the debug log file has been created and contains datas
            -->
      <!-- #################################### -->
      
      <testcase name="getTestCaseName('basic tests on Debug logger')">
        <sequence>
          <call function="'testCase_Preamble'"/>
          <message>
            '----  Basic tests on Debug loggers -----'
          </message>

          <message>'------  Enabled Debug logger --' </message>
          <call function="'dsconfig'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'subcommand'     : 'set-log-publisher-prop',
              'objectType'     : 'publisher-name',
              'objectName'     :  'File-Based Debug Logger',
              'optionsString'  : '--set enabled:true --set default-debug-level:warning --set log-file:logs/mydebug',
              'expectedRC'     : 0
            }
          </call>
          
          <call function="'StopDsWithScript'">
            { 'location'    : STAF_REMOTE_HOSTNAME,
              'dsHost'      : DIRECTORY_INSTANCE_HOST,
              'dsAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsBindDN'    : DIRECTORY_INSTANCE_DN,
              'dsBindPwd'   : DIRECTORY_INSTANCE_PSWD
            }
          </call>
          <call function="'StartDsWithScript'">
            { 'location'    : STAF_REMOTE_HOSTNAME }
          </call>
          <!--- Check that DS started -->
          <call function="'isAlive'">
            {
            'noOfLoops'        : 10 ,
            'noOfMilliSeconds' : 2000
            }
          </call>

          <message>'--- Check log files ---'</message>  
          <call function="'listFolder'">
            { 'location'   : '%s' % DIRECTORY_INSTANCE_HOST,
              'foldername' : '%s/%s/logs' % (DIRECTORY_INSTANCE_DIR,OPENDSNAME),
              'filename'   : 'mydebug'
            }
          </call>

          <script>
           error=0
          </script> 
          <if expr="len(cmdResult) == 0">                               
            <sequence>
              <message>'ERROR.  The Debug logger should be created'</message>     
              <script>
                error=1
              </script>
            </sequence>
            <else>
              <sequence>
                <iterate var="result" in="cmdResult">
                  <sequence>
                    <script>
                      logsize=result["size"]
                    </script>
                    <if expr="logsize == 0">
                      <sequence>
                        <message>'ERROR.  The Debug logger should contain data'</message>      
                        <script>
                          error=1
                        </script>
                      </sequence>
                    </if>
                  </sequence>
                </iterate>
              </sequence>
            </else>
          </if>
          
          <if expr="error == 0">
            <call function="'testPassed'"/>
            <else>
              <call function="'testFailed'"/>
            </else>
          </if>
                   
          <message>'------  Disable Debug logger --' </message>
          <call function="'dsconfig'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'subcommand'     : 'set-log-publisher-prop',
              'objectType'     : 'publisher-name',
              'objectName'     :  'File-Based Debug Logger',
              'optionsString'  : '--set enabled:false',
              'expectedRC'     : 0
            }
          </call>          
             
          <call function="'testCase_Postamble'"/>
        </sequence>
      </testcase>

    </sequence> 
        <finally>
          <sequence>
            <!-- Test Suite Cleanup -->
            <message>'Finally: Global Log Writer Cleanup.'</message>
            <try>
              <call function="'common_cleanup'" />
            <catch exception="'STAFException'">
              <sequence>
                <message log="1" level="'fatal'">'Cleanup of test suite failed.'</message>
              </sequence>
            </catch>
            <finally>
              <call function="'testSuite_Postamble'"/>
            </finally>
            </try>
          </sequence>
        </finally>
      
      </try>
    </block>     
  </function>
</stax>
