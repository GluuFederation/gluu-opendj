<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2007-2010 Sun Microsystems, Inc.
 !      Portions Copyright 2011-2013 ForgeRock AS.
! -->
<stax>
  <defaultcall function="import-ldif"/>
  <function name="import-ldif" scope="local">
    <block name="STAXCurrentFunction">    
      <try>
        <sequence>
          <script>
            CurrentTestPath['suite']=STAXCurrentFunction
          </script>
          <call function="'testSuite_Preamble'" />
          
          
          <!--- Test Suite information
            #@TestSuiteName       Import Tasks
            #@TestSuitePurpose    Validate the Import functionality in mode task
            #@TestSuiteID         Import Tests
            #@TestSuiteGroup      Import
            #@TestGroup           tasks
            #@TestScript          import_ldif.xml
            #@TestHTMLLink        http://opends.dev.java.net/
            -->
  
            <call function="'common_setup'">
              {
                'quickStart'    : True ,
                'startServer'   : True  ,
                'stopServer'    : False
              }
            </call>
                     
          <!--- Test Case information
            #@TestMarker           Import Tasks
            #@TestName             Import task in synchronous mode 
            #@TestPurpose          Schedule a import in task mode to be executed immedialy in synchronous mode
            #@TestPreamble
            #@TestStep             Execute a import-ldif in a task
            #@TestStep             Execute manage-tasks output and check the Import task is returned
            #@TestStep             Don't specify the -t option
            #@TestStep             The task is scheduled for immediate execution and the script must wait the end of the import
            #@TestPostamble
            #@TestResult
            -->
              
          <testcase name="getTestCaseName('schedule import-ldif task for immediate execution in synchronous mode')">
            <sequence>
              <call function="'testCase_Preamble'"/>              
              
              <call function="'ImportLdifWithScript'">
                { 'location'          : STAF_REMOTE_HOSTNAME ,
                'dsInstanceHost'      : DIRECTORY_INSTANCE_HOST,
                'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
                'dsInstanceDn'        : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd'      : DIRECTORY_INSTANCE_PSWD,
                'ldifFile'            : '%s/tasks/import.ldif' % remote.data,
                'append'              : ' ',
                'startTask'           : '0',
                'backEnd'             : DIRECTORY_INSTANCE_BE}
              </call>
  
              <!-- Check data are imported -->
              <call function="'checkImport'">
                { 'expectedEntries' : ['uid=scarter,dc=example,dc=com',
                'uid=tmorris, dc=example,dc=com'],
                'startDS'     : 'False'              
                }
              </call>

              <!-- Delete entries -->
              <call function="'DeleteEntry'">
                { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'     : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'       : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'     : DIRECTORY_INSTANCE_PSWD ,
                'dsBaseDN'           : 'uid=scarter,dc=example,dc=com' }
              </call>
              <call function="'DeleteEntry'">
                { 'dsInstanceHost'        : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'          : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'            : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'          : DIRECTORY_INSTANCE_PSWD ,
                'dsBaseDN'		: 'uid=tmorris,dc=example,dc=com' }
              </call>          
              
              <call function="'testCase_Postamble'"/>
            </sequence>
          </testcase>
          
          
          <!--- Test Case information
  
            #@TestMarker           Import Tasks
            #@TestName             Import task in asynchronous mode 
            #@TestPurpose          Schedule a import in task mode to be executed immedialy in asynchronous mode
            #@TestPreamble
            #@TestStep             Execute a import-ldif in a task
            #@TestStep             specify the -t option with the value 0
            #@TestStep             The task is scheduled for immediate execution
            @TestStep              The script returns immedialy after scheduling the task                
            #@TestPostamble        
         --> 
              
          <testcase name="getTestCaseName('schedule import-ldif task for immediate execution in asynchronous mode')">
            <sequence>
              <call function="'testCase_Preamble'"/>              
              
              <call function="'ImportLdifWithScript'">
                { 'location'          : STAF_REMOTE_HOSTNAME ,
                'dsInstanceHost'      : DIRECTORY_INSTANCE_HOST,
                'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
                'dsInstanceDn'        : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd'      : DIRECTORY_INSTANCE_PSWD,
                'ldifFile'            : '%s/tasks/import.ldif' % remote.data,
                'append'              : ' ',
                'backEnd'             : DIRECTORY_INSTANCE_BE}
              </call>
              <call function="'Sleep'">
                { 'sleepForMilliSeconds'  :  40000 }
              </call>
              
              <!--  Check data are imported -->
              <call function="'checkImport'">
                { 'expectedEntries' : ['uid=scarter,dc=example,dc=com',
                'uid=tmorris, dc=example,dc=com'],
                'startDS'     : 'False'              
                }
              </call>
              
              <!-- Delete entries -->
              <call function="'DeleteEntry'">
                { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'	 : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
                'dsBaseDN'         : 'uid=scarter,dc=example,dc=com' }
              </call>
              <call function="'DeleteEntry'">
                { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'	 : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
                'dsBaseDN'         : 'uid=tmorris,dc=example,dc=com' }
              </call>          
              
              <call function="'testCase_Postamble'"/>
            </sequence>
          </testcase>
          
          
       <!--- Test Case information
  
            #@TestMarker           Import Tasks
            #@TestName             Schedule a Import task
            #@TestPurpose          Schedule a import in task mode
            #@TestPreamble
            #@TestStep             Execute a import-ldif in a task
            @TestStep              specify the -t option with the value non null  to schedule an  execution  
            #@TestPostamble        
         --> 
      
              
          <testcase name="getTestCaseName('schedule import-ldif task for scheduled execution in asynchronous mode')">
            <sequence>
              <call function="'testCase_Preamble'"/>              
              
              <call function="'ImportLdifWithScript'">
                { 'location'          : STAF_REMOTE_HOSTNAME ,
                'dsInstanceHost'      : DIRECTORY_INSTANCE_HOST,
                'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
                'dsInstanceDn'        : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd'      : DIRECTORY_INSTANCE_PSWD,
                'ldifFile'            : '%s/tasks/import.ldif' % remote.data,
                'append'              : ' ',
                'startTask'           : '20061212000000',
                'expectedRC'          : 1,
                'backEnd'             : DIRECTORY_INSTANCE_BE}
              </call>
  
              <script>
                returnString = STAXResult[0][1]
              </script>
              <call function="'checktestString'">
                {'returnString'     : returnString ,
                  'expectedString'   : 'The specified start time \'20061212000000\' has already passed'
                }
              </call>
  
              
              <call function="'testCase_Postamble'"/>
            </sequence>
          </testcase>
  
            <!--- Test Case information
            #@TestMarker      Import Tasks
            #@TestName        Schedule a recurring Import task
            #@TestPurpose     Schedule a recurring Import in task mode
            #@TestPreamble
            #@TestStep        Create a recurring Import in task mode
            #@TestStep        specify the recurringTask option with the value
            #@TestStep        non null to schedule a recurring execution
            #@TestPostamble
            #@TestResult
            -->
  
          <testcase name="getTestCaseName('schedule recurring import task')">
            <sequence>
              <call function="'testCase_Preamble'"/>
  
              <!--- ReStart DS to clear the output of manage-tasks-->
              <call function="'StopDsWithScript'">
                { 'location'  : STAF_REMOTE_HOSTNAME,
                'dsHost'      : DIRECTORY_INSTANCE_HOST,
                'dsAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
                'dsBindDN'    : DIRECTORY_INSTANCE_DN,
                'dsBindPwd'   : DIRECTORY_INSTANCE_PSWD }
              </call>
  
              <call function="'StartDsWithScript'">
                { 'location'  : STAF_REMOTE_HOSTNAME }
              </call>
  
              <!--- Check that DS started -->
              <call function="'isAlive'">
               { 'noOfLoops'		: 10 ,
                 'noOfMilliSeconds' : 2000
               }
              </call>
  
              <call function="'ImportLdifWithScript'">
                { 'location'          : STAF_REMOTE_HOSTNAME ,
                'dsInstanceHost'      : DIRECTORY_INSTANCE_HOST,
                'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
                'dsInstanceDn'        : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd'      : DIRECTORY_INSTANCE_PSWD,
                'ldifFile'            : '%s/tasks/import.ldif' % remote.data,
                'schedulePattern'     : '"0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58 * * * *"',
                'backEnd'             : DIRECTORY_INSTANCE_BE}
              </call>
  
              <!-- manage-tasks -->
              <call function="'manage-tasks'">
                { 'location'     : STAF_REMOTE_HOSTNAME ,
                'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
                'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
                'dsQuiet'        : ' '
                }
              </call>
  
              <script>
                returnString = STAXResult[0][1]
              </script>
  
              <call function="'searchStringForSubstring'">
                { 'returnString'	   : returnString,
                'testString'	   : 'ImportTask-',
                'expectedResult'	   : '1' }
              </call>
  
              <call function="'searchStringForSubstring'">
                { 'returnString'	   : returnString,
                'testString'	   : 'Waiting on start time',
                'expectedResult'	   : '1' }
              </call>
  
              <call function="'Sleep'">
                { 'sleepForMilliSeconds'  :  120000 }
              </call>
  
              <!-- manage-tasks -->
              <call function="'manage-tasks'">
                { 'location'     : STAF_REMOTE_HOSTNAME ,
                'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
                'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
                'dsQuiet'        : ' '
                }
              </call>
  
              <script>
                returnString = STAXResult[0][1]
              </script>
  
              <call function="'searchStringForSubstring'">
                { 'returnString'	   : returnString,
                'testString'	   : 'ImportTask-*',
                'expectedResult'	   : '1' }
              </call>
  
              <call function="'searchStringForSubstring'">
                { 'returnString'	   : returnString,
                'testString'	   : 'Completed successfully',
                'expectedResult'	   : '1' }
              </call>
  
              <call function="'searchStringForSubstring'">
                { 'returnString'	   : returnString,
                'testString'	   : 'Waiting on start time',
                'expectedResult'	   : '1' }
              </call>
  
              <!-- cancel the recurring task ExportTask-* with manage-tasks -->
              <call function="'manage-tasks'">
                { 'location'     : STAF_REMOTE_HOSTNAME ,
                'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
                'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
                'dsCancel'       : 'ImportTask-*',
                'dsQuiet'        : ' '
                }
              </call>
  
              <script>
                returnString = STAXResult[0][1]
              </script>
  
              <call function="'searchStringForSubstring'">
                { 'returnString'	   : returnString,
                'testString'	   : 'Task ImportTask-',
                'expectedResult'	   : '1' }
              </call>
  
              <call function="'searchStringForSubstring'">
                { 'returnString'	   : returnString,
                'testString'	   : 'canceled',
                'expectedResult'	   : '1' }
              </call>
  
              <call function="'testCase_Postamble'"/>
            </sequence>
          </testcase>
  
        </sequence>
        <finally>
          <sequence>
            <!-- Test Suite Cleanup -->
            <message>'Finally: Tasks Cleanup.'</message>
            <try>
              <call function="'common_cleanup'" />
            <catch exception="'STAFException'">
              <sequence>
                <message log="1" level="'fatal'">'Cleanup of test suite failed.'</message>
              </sequence>
            </catch>
            <finally>
              <call function="'testSuite_Postamble'"/>
            </finally>
            </try>
          </sequence>
        </finally>
      
      </try>
    </block>      
  </function>
</stax>
