<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2007-2008 Sun Microsystems, Inc.
 ! -->
<stax>
  
<defaultcall function="equal_dn_mapper"/>
<function name="equal_dn_mapper" scope="local">      

<sequence>
                               
       <!--- Test Case : setup -->
       <!---
  #@TestMarker              Setup Tests
  #@TestName                Set the SASL EXTERNAL mechanism to Subject Equal DN 
  #@TestIssue                   
  #@TestPurpose            Set the SASL EXTERNAL mechanism to Subject EqualN
  #@TestPreamble           none
  #@TestStep                  Set the SASL EXTERNAL mechanism to Subject Equal DN 
  #@TestPostamble          none
  #@TestResult                Success if OpenDS returns 0 for all operations
      -->
      
    
  <testcase name="getTestCaseName(' setup - equal_dn_mapper')">

    <sequence>
      <call function="'testCase_Preamble'"/>

      <message>
             '----  Configure the SASL EXTERNAL mechanism -----'
      </message>      

     <call function="'dsconfig'">
    	{ 'dsInstanceHost'	: DIRECTORY_INSTANCE_HOST,
        'dsInstanceDn'		: DIRECTORY_INSTANCE_DN ,
        'dsInstancePswd'	: DIRECTORY_INSTANCE_PSWD ,
        'subcommand'		: 'set-sasl-mechanism-handler-prop' ,
        'objectType'		 : 'handler-name' ,
        'objectName'		: 'EXTERNAL',
        'optionsString'		 : '--set certificate-mapper:"Subject Equals DN"',
       'expectedRC'		: 0 }
      </call>
        
                 
      <call function="'testCase_Postamble'"/>
    </sequence>
  </testcase>
  
  
<!---
  #@TestMarker             Equal DN mapping
  #@TestName               Mapping on DN
  #@TestIssue                   
  #@TestPurpose           Use the Equal DN certificate mapper
   #@TestPurpose            The mapping will be done on entry DN
   #@TestStep                  Two users entries are used to validate this mapper
  #@TestPreamble          none
  #@TestPostamble         none
  #@TestResult               Success if OpenDS returns 0 for all operations
      -->
    
  <testcase name="getTestCaseName('Equal DN mapping')">
    <sequence>

    <call function="'testCase_Preamble'"/>
   
  <!-- Load in the local shared python objects from libraries -->
      <call function="'loadVariables'">
   </call>
        
    <!--  Check mapping is working -->         
    <message>'--- Check SSL communication with SASL EXTERNAL authentication'</message>
    
    <!-- bound as USER_1_DN -->    
     <call function="'ldapSearchWithScript'">
    { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
      'dsInstancePort'   : DIRECTORY_INSTANCE_SSL_PORT ,     
          'dsBaseDN'         : DIRECTORY_INSTANCE_SFX,     
      'dsFilter'    : 'objectclass=*'  ,
          'dsKeyStorePassword'   :  CLIENT_STOREPASS,
          'dsUseSSL'             :  ' ',
          'dsUseSASLExternal'   :  ' ',
          'dsCertNickname'       : USER_1_CERT,
          'dsTrustStorePath'       : CLIENT_KEYSTORE,
          'dsKeyStorePath'        : CLIENT_KEYSTORE,
          'dsReportAuthzID'   : ' ',
          'dsScope'                 : 'base',
          'expectedRC'           :  0 }           
     </call>    
    
     <script>
         STAXCode = RC
         ldapSearchResult = STAXResult[0][1]
     </script>
     <call function="'CheckMatches'">
             { 'string2find' : USER_1_DN ,
                'mainString'    : ldapSearchResult ,
                'nbExpected'    : 1
             }
    </call>                 

    <!-- bound as USER_2_DN -->
     <call function="'ldapSearchWithScript'">
    { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
      'dsInstancePort'   : DIRECTORY_INSTANCE_SSL_PORT ,     
          'dsBaseDN'         : DIRECTORY_INSTANCE_SFX,     
      'dsFilter'    : 'objectclass=*'  ,
          'dsKeyStorePassword'   :  CLIENT_STOREPASS,
          'dsUseSSL'             :  ' ',
          'dsUseSASLExternal'   :  ' ',
          'dsCertNickname'       : USER_2_CERT,
          'dsTrustStorePath'       : CLIENT_KEYSTORE,
          'dsKeyStorePath'        : CLIENT_KEYSTORE,
          'dsReportAuthzID'   : ' ',
          'dsScope'                 : 'base',
          'expectedRC'           :  0 }           
     </call>    
    
     <script>
         STAXCode = RC
         ldapSearchResult = STAXResult[0][1]
     </script>
     <call function="'CheckMatches'">
             { 'string2find' : USER_2_DN ,
                'mainString'    : ldapSearchResult ,
                'nbExpected'    : 1
             }
    </call>                                

    <!-- bound as USER_1_DN -->    
   <message>'--- Check StartTLS communication with SASL EXTERNAL authentication'</message>    
     <call function="'ldapSearchWithScript'">
    { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
      'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,     
          'dsBaseDN'         : DIRECTORY_INSTANCE_SFX,     
      'dsFilter'    : 'objectclass=*'  ,
          'dsKeyStorePassword'   :  CLIENT_STOREPASS,
          'dsUseStartTLS'             :  ' ',
          'dsUseSASLExternal'   :  ' ',
          'dsCertNickname'       : USER_1_CERT,
          'dsTrustStorePath'       : CLIENT_KEYSTORE,
          'dsKeyStorePath'        : CLIENT_KEYSTORE,
          'dsReportAuthzID'   : ' ',
          'dsScope'                 : 'base',
          'expectedRC'           :  0 }           
     </call>    

     <script>
           STAXCode = RC
           ldapSearchResult = STAXResult[0][1]
     </script>
     <call function="'CheckMatches'">
             { 'string2find' : USER_1_DN ,
                'mainString'    : ldapSearchResult ,
                'nbExpected'    : 1
             }
    </call>        
             
     <!-- bound as USER_2_DN -->
     <call function="'ldapSearchWithScript'">
    { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
      'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,     
          'dsBaseDN'         : DIRECTORY_INSTANCE_SFX,     
      'dsFilter'    : 'objectclass=*'  ,
          'dsKeyStorePassword'   :  CLIENT_STOREPASS,
          'dsUseStartTLS'             :  ' ',
          'dsUseSASLExternal'   :  ' ',
          'dsCertNickname'       : USER_2_CERT,
          'dsTrustStorePath'       : CLIENT_KEYSTORE,
          'dsKeyStorePath'        : CLIENT_KEYSTORE,
          'dsReportAuthzID'   : ' ',
          'dsScope'                 : 'base',
          'expectedRC'           :  0 }           
     </call>    
     <script>
           STAXCode = RC
           ldapSearchResult = STAXResult[0][1]
     </script>
     <call function="'CheckMatches'">
             { 'string2find' : USER_2_DN ,
                'mainString'    : ldapSearchResult ,
                'nbExpected'    : 1
             }
    </call>  
    
    <call function="'testCase_Postamble'"/>      
    </sequence>
  </testcase>
  
</sequence>
</function>

</stax>
