<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, exclude this CDDL HEADER in each
 ! file and exclude the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2009-2010 Sun Microsystems, Inc.
 !      Portions Copyright 2011-2013 ForgeRock AS.
 ! -->
<stax>


  <!--- Test Case information
  #@TestMarker          Backend Import Tests
  #@TestName            Backend: Import: LDIF Default
  #@TestID              LDIF Default
  #@TestPurpose         Verify an import of a LDIF file using the default backend.
  #@TestPreamble
  #@TestSteps           ./import-ldif.sh -l ../ldif/Example.ldif -n "userRoot"
  #@TestPostamble
  #@TestResult
  -->

  <function name="backends_import_default" scope="local">

    <testcase name="getTestCaseName('Import LDIF Default')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            {
              'ldifFile'  : '%s/backends/export_tasks_ldif/default.ldif' % remote.data,
              'backEnd'   : DIRECTORY_INSTANCE_BE
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller, ou=People, dc=example,dc=com',
                                   'uid=rhunt, ou=People, dc=example,dc=com'] }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>

    </testcase>

  </function>


   <!--- Test Case information
    #@TestMarker          Backend Import Tests
    #@TestName            Backend: Import: LDIF Non Default
    #@TestID              LDIF Non Default
    #@TestPurpose         Verify an import of a LDIF file using a differrent backend to the default.
    #@TestPreamble
    #@TestSteps           ./import-ldif.sh -n "nonDefault" -l ../ldif/Example.ldif
    #@TestPostamble
    #@TestResult
    -->

  <function name="backends_import_nonDefault" scope="local">

    <testcase name="getTestCaseName('Import LDIF Non Default')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'StartDsWithScript'"/>

          <!--- Check that DS started -->
          <call function="'isAlive'">
            { 'noOfLoops'        : 10 ,
              'noOfMilliSeconds' : 2000
            }
          </call>

          <script>
            options=[]
            options.append('--backend-name "nonDefault"')
            options.append('--set base-dn:"dc=non-default,dc=com"')
            options.append('--set enabled:true')
            options.append('--set writability-mode:enabled')
            options.append('-t local-db')
            createBackendOptions=' '.join(options)
          </script>

          <call function="'dsconfig'">
            {
              'subcommand'     : 'create-backend',
              'optionsString'  : createBackendOptions
            }
          </call>

          <call function="'StopDsWithScript'"/>

          <call function="'ImportLdifWithScript'">
            {
              'ldifFile'      : '%s/backends/export_tasks_ldif/nonDefault.ldif' % remote.data,
              'backEnd'   : 'nonDefault'
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=non-default,dc=com',
                                   'uid=dmiller, ou=People, dc=non-default,dc=com',
                                   'uid=rhunt, ou=People, dc=non-default,dc=com'] }
          </call>

          <call function="'StartDsWithScript'"/>

          <!--- Check that DS started -->
          <call function="'isAlive'">
            { 'noOfLoops'        : 10 ,
              'noOfMilliSeconds' : 2000
            }
          </call>
          
        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>
      </try>
    </testcase>

  </function>

  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: LDIF Default
    #@TestID              LDIF Default
    #@TestPurpose         Verify an export task of a LDIF file on the default backend.
    #@TestPreamble
    #@TestSteps           Client calls  :
                                     exportLDIF task with the included branch default backend.
                                     ldifDIFF between output ldif file and export_tasks_ldif/defaultBackEnd.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->
  
  <function name="backends_export_tasks_001" scope="local">

    <testcase name="getTestCaseName('LDIF Default')">

      <try>

        <sequence>
  
          <call function="'testCase_Preamble'"/>
  
          <message>
           'Backend ExportTasks1: Export the data  by scheduling a task'
          </message>
          <call function="'exportLdifWithScript'">
            {
              'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'       : '%s/backends/ExportTasks1.ldif' % remote.temp
            }
          </call>

          <message>
            'Backend ExportTasks1: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
            {
              'sourceLdif' : '%s/backends/export_tasks_ldif/defaultBackEnd.ref' % remote.data,
              'targetLdif' : '%s/backends/ExportTasks1.ldif' % remote.temp,
              'outputLdif' : '%s/backends/ExportTasks1.out' % remote.temp
            }
          </call>
          
        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: LDIF Non Default
    #@TestID              LDIF Non Default
    #@TestPurpose         Verify an export task of a LDIF file on a differrent backend to the default.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the parameters non default backend, and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif//nonDefaultBackEnd.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_002" scope="local">

    <testcase name="getTestCaseName('LDIF nonDefault')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks2: Export the data  by scheduling a task'
          </message>
          <call function="'exportLdifWithScript'">
            {
              'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'backEnd' :  'nonDefault',
              'excludeAttributes' :  ["userPassword"],
              'ldifFile'       : '%s/backends/ExportTasks2.ldif' % remote.temp
            }
          </call>

          <message>
            'Backend ExportTasks2: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
            {
              'sourceLdif' : '%s/backends/export_tasks_ldif/nonDefaultBackEnd.ref' % remote.data,
              'targetLdif' : '%s/backends/ExportTasks2.ldif' % remote.temp,
              'outputLdif' : '%s/backends/ExportTasks2.out' % remote.temp
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Include Branch
    #@TestID              Fractional Include Branch
    #@TestPurpose         Verify an export task of a LDIF file specifying a branch that should be included in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the branch to be included and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Include_Branch.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_003" scope="local">

    <testcase name="getTestCaseName('Include Branch')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks3: Export the data  by scheduling a task and include branch ou=people,dc=example,dc=com '
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeBranches' :  ["ou=people,dc=example,dc=com"],
              'ldifFile'       : '%s/backends/ExportTasks3.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks3: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Include_Branch.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks3.ldif' % remote.temp,                  
                  'outputLdif' : '%s/backends/ExportTasks3.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Include Branches
    #@TestID              Fractional Include Branches
    #@TestPurpose         Verify an export task of a LDIF file specifying multiple branches that should be included in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the branches to be included and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Multiple_Include_Branch.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_004" scope="local">

    <testcase name="getTestCaseName('Multiple Include Branches')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks4: Export the data  by scheduling a task and include branches cn=Directory Administrators,ou=Groups,dc=example,dc=com \
            , cn=Accounting Managers,ou=Groups,dc=example,dc=com, cn=HR Managers,ou=Groups,dc=example,dc=com'
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeBranches' :  ["cn=Directory Administrators,ou=Groups,dc=example,dc=com",
                                    "cn=HR Managers,ou=Groups,dc=example,dc=com",
                                    "cn=Accounting Managers,ou=Groups,dc=example,dc=com"],
              'ldifFile'       : '%s/backends/ExportTasks4.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks4: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Multiple_Include_Branch.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks4.ldif' % remote.temp,                  
                  'outputLdif' : '%s/backends/ExportTasks4.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Exclude Branch
    #@TestID              Fractional Exclude Branch
    #@TestPurpose         Verify an export task of a LDIF file specifying a branch that should be excluded in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the branch to be excluded and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Exclude_Branch.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->
  <function name="backends_export_tasks_005" scope="local">

    <testcase name="getTestCaseName('Exclude Branch')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks5: Export the data  by scheduling a task and exclude branch ou=Groups,dc=example,dc=com '
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'excludeBranches' :  ["ou=Groups,dc=example,dc=com"],
              'ldifFile'       : '%s/backends/ExportTasks5.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks5: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Exclude_Branch.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks5.ldif' % remote.temp,                  
                  'outputLdif' : '%s/backends/ExportTasks5.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Exclude Branches
    #@TestID              Fractional Exclude Branches
    #@TestPurpose         Verify an export task of a LDIF file specifying multiple branches that should be excluded in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with branches to be excluded, and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Multiple_Exclude_Branch.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_006" scope="local">

    <testcase name="getTestCaseName('Multiple Exclude Branches')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks6: Export the data  by scheduling a task and exclude branches cn=Directory Administrators,ou=Groups,dc=example,dc=com \
            , cn=Accounting Managers,ou=Groups,dc=example,dc=com, cn=HR Managers,ou=Groups,dc=example,dc=com'
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'excludeBranches' :  ["cn=Directory Administrators,ou=Groups,dc=example,dc=com",
                                    "cn=HR Managers,ou=Groups,dc=example,dc=com",
                                    "cn=Accounting Managers,ou=Groups,dc=example,dc=com"],
              'ldifFile'       : '%s/backends/ExportTasks6.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks6: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Multiple_Exclude_Branch.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks6.ldif' % remote.temp,
                  'outputLdif' : '%s/backends/ExportTasks6.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Branches Mix
    #@TestID              Fractional Branches Mix
    #@TestPurpose         Verify an export task of a LDIF file specifying a mix of include and exclude branches.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with branches to be excluded, branches to be included, and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Mix_Include_Exclude_Branch.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_007" scope="local">

    <testcase name="getTestCaseName('Mix Include and Exclude Branches')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks7: Export the data  by scheduling a task and include branch ou=Groups,dc=example,dc=com and exclude branch \
            cn=Accounting Managers,ou=Groups,dc=example,dc=com'
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeBranches' :  ["ou=Groups,dc=example,dc=com"],
              'excludeBranches' :  ["cn=Accounting Managers,ou=Groups,dc=example,dc=com"],
              'ldifFile'       : '%s/backends/ExportTasks7.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks7: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Mix_Include_Exclude_Branch.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks7.ldif' % remote.temp,
                  'outputLdif' : '%s/backends/ExportTasks7.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Include Attribute
    #@TestID              Fractional Include Attribute
    #@TestPurpose         Verify an export task of a LDIF file specifying an attribute that should be included in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the attribute to be included, and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Include_Attribute.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->
  <function name="backends_export_tasks_008" scope="local">

    <testcase name="getTestCaseName('Include Attribute')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks8: Export the data  by scheduling a task and include attribute dn '
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeAttributes' :  ["dn"],
              'ldifFile'       : '%s/backends/ExportTasks8.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks8: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Include_Attribute.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks8.ldif' % remote.temp,
                  'outputLdif' : '%s/backends/ExportTasks8.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Include Attributes
    #@TestID              Fractional Include Attributes
    #@TestPurpose         Verify an export task of a LDIF file specifying multiple attributes that should be included in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the attributes to be included, and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Multiple_Include_Attribute.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->


  <function name="backends_export_tasks_009" scope="local">

    <testcase name="getTestCaseName('Multiple Include Attributes')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks9: Export the data  by scheduling a task and include attributes  mail, givenName'
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeAttributes' :  ["mail","givenName"],
              'ldifFile'       : '%s/backends/ExportTasks9.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks9: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
            {
            'sourceLdif' : '%s/backends/export_tasks_ldif/Multiple_Include_Attribute.ref' % remote.data,
            'targetLdif' : '%s/backends/ExportTasks9.ldif' % remote.temp,
            'outputLdif' : '%s/backends/ExportTasks9.out' % remote.temp
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Exclude Attribute
    #@TestID              Fractional Exclude Attribute
    #@TestPurpose         Verify an export task of a LDIF file specifying an attribute that should be excluded in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the attribute to be excluded, and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Exclude_Attribute.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->
  <function name="backends_export_tasks_010" scope="local">

    <testcase name="getTestCaseName('Exclude Attribute')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks10: Export the data  by scheduling a task and exclude attribute givenName '
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'excludeAttributes' :  ["givenName"],
              'ldifFile'       : '%s/backends/ExportTasks10.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks10: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Exclude_Attribute.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks10.ldif' % remote.temp,
                  'outputLdif' : '%s/backends/ExportTasks10.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>

  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Exclude Attributes
    #@TestID              Fractional Exclude Attributes
    #@TestPurpose         Verify an export task of a LDIF file specifying multiple attributes that should be excluded in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the attributes to be excluded and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Multiple_Exclude_Attribute.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_011" scope="local">

    <testcase name="getTestCaseName('Multiple Exclude Attributes')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks11: Export the data  by scheduling a task and exclude attributes  cn, telephoneNumber'
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'excludeAttributes' :  ["cn","telephoneNumber"],
              'ldifFile'       : '%s/backends/ExportTasks11.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks11: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Multiple_Exclude_Attribute.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks11.ldif' % remote.temp,                  
                  'outputLdif' : '%s/backends/ExportTasks11.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Mix
    #@TestID              Fractional Mix
    #@TestPurpose         Verify an export task of a LDIF file specifying a mix of fractional attributes and branches.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the branches and attributes to be included and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Mix_IncludeBranch_IncludeAttribute.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_012" scope="local">

    <testcase name="getTestCaseName('Mix Fractional Attributes and Branches')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks12: Export the data  by scheduling a task and include branch ou=People,dc=example,dc=com and include attribute givenName'
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeBranches' :  ["ou=People,dc=example,dc=com"],
              'includeAttributes' :  ["givenName"],
              'ldifFile'       : '%s/backends/ExportTasks12.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks12: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Mix_IncludeBranch_IncludeAttribute.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks12.ldif' % remote.temp,
                  'outputLdif' : '%s/backends/ExportTasks12.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>

  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Filtered Include
    #@TestID              Filtered Include
    #@TestPurpose         Verify an export task of a LDIF file specifying a search filter control which entries are included in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the specified include filter and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Filtered_Include_Attribute.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_013" scope="local">

    <testcase name="getTestCaseName('Include Filter')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks13: Export the data  by scheduling a task and include filter  l = Santa Clara'
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeFilters' :  ["l=Santa Clara"],
              'ldifFile'       : '%s/backends/ExportTasks13.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks13: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
            {
            'sourceLdif' : '%s/backends/export_tasks_ldif/Filtered_Include.ref' % remote.data,
            'targetLdif' : '%s/backends/ExportTasks13.ldif' % remote.temp,
            'outputLdif' : '%s/backends/ExportTasks13.out' % remote.temp
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>

    <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Filtered Includes
    #@TestID              Filtered Includes
    #@TestPurpose         Verify an export task of a LDIF file specifying multiple search filters control which entries are included in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the specified include filters, and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Filtered_Includes.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_014" scope="local">

    <testcase name="getTestCaseName('Multiple Include Filters')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks14: Export the data  by scheduling a task and include filters  l=Santa Clara,ou=Accounting'
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeFilters' :  ["l=Santa Clara","ou=Accounting"],
              'ldifFile'       : '%s/backends/ExportTasks14.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks14: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
                  {
                  'sourceLdif' : '%s/backends/export_tasks_ldif/Filtered_Includes.ref' % remote.data,
                  'targetLdif' : '%s/backends/ExportTasks14.ldif' % remote.temp,
                  'outputLdif' : '%s/backends/ExportTasks14.out' % remote.temp
                  }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Filtered Excludes
    #@TestID              Filtered Excludes
    #@TestPurpose         Verify an export task of a LDIF file specifying multiple search filters control which entries are excluded in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the specified exclude filters, and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Filtered_Excludes.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_015" scope="local">

    <testcase name="getTestCaseName('Multiple Exclude Filters')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks15: Export the data  by scheduling a task and exclude filters  uid=a*,l=Sunnyvale'
          </message>

          <call function="'exportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'excludeFilters' :  ["uid=a*","l=Sunnyvale"],
              'ldifFile'       : '%s/backends/ExportTasks15.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks15: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
          {
            'sourceLdif' : '%s/backends/export_tasks_ldif/Filtered_Excludes.ref' % remote.data,
            'targetLdif' : '%s/backends/ExportTasks15.ldif' % remote.temp,
            'outputLdif' : '%s/backends/ExportTasks15.out' % remote.temp
          }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
 
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Filtered Excludes Complex
    #@TestID              Filtered Excludes Complex
    #@TestPurpose         Verify an export task of a LDIF file specifying complex search filters control which entries are excluded in the export task.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the complex excluded filter , and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Complex_Filter_Exclude.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_016" scope="local">

    <testcase name="getTestCaseName('Complex Exclude Filter')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks16: Export the data  by scheduling a task and exclude filter entries with ou=Human Resources and l=SunnyVale'
          </message>

          <call function="'exportLdifWithScript'">
            {
              'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'excludeFilters' :  ["&amp;(ou=Human Resources)(l=SunnyVale)"],
              'ldifFile'       : '%s/backends/ExportTasks16.ldif' % remote.temp
            }
          </call>
          <message>
            'Backend ExportTasks16: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
          {
            'sourceLdif' : '%s/backends/export_tasks_ldif/Complex_Filter_Exclude.ref' % remote.data,
            'targetLdif' : '%s/backends/ExportTasks16.ldif' % remote.temp,
            'outputLdif' : '%s/backends/ExportTasks16.out' % remote.temp
          }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
 
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Fractional Filtered Mix
    #@TestID              Fractional Filtered Mix
    #@TestPurpose         Verify an export task of a LDIF file specifying a mix of fractional and filtered.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the included branch, specified filter and ldifFile.
                                    Make ldifDIFF between output file and export_tasks_ldif/Mix_Fractional_Filtered.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_017" scope="local">

    <testcase name="getTestCaseName('Mix Fractional and Filtered')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks17: Export the data  by scheduling a task and include branch ou=People,dc=example,dc=com \
            and exclude filter  l=Stanta Clara'
          </message>

          <call function="'exportLdifWithScript'">
          {
            'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
            'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
            'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
            'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
            'includeBranches' :  ["ou=people,dc=example,dc=com"],
            'excludeFilters' :  ["l=Santa Clara"],
            'ldifFile'       : '%s/backends/ExportTasks17.ldif' % remote.temp
          }
          </call>
          <message>
            'Backend ExportTasks17: Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
            {
              'sourceLdif' : '%s/backends/export_tasks_ldif/Mix_Fractional_Filtered.ref' % remote.data,
              'targetLdif' : '%s/backends/ExportTasks17.ldif' % remote.temp,
              'outputLdif' : '%s/backends/ExportTasks17.out' % remote.temp
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Append To LDIF
    #@TestID              Append To LDIF
    #@TestPurpose         Verify an export task of a LDIF file specifying that the export task process should append to the existing LDIF file.
    #@TestPreamble
    #@TestSteps           Client calls exportLDIF task with the included branch, and ldifFile.
                                     Client calls exportLDIF task with an other included branch, append to the first ldif file.
                                     Make ldifDIFF between output file and export_tasks_ldif/Append.ref.
    #@TestPostamble
    #@TestResult Success if exportLDIF task and ldifDIFF return 0
  -->

  <function name="backends_export_tasks_018" scope="local">

    <testcase name="getTestCaseName('Append Ldif')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks18: Export the data  by scheduling a task and include branch ou=people,dc=example,dc=com '
          </message>

          <call function="'exportLdifWithScript'">
            {
              'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeBranches' :  ["ou=people,dc=example,dc=com"],
              'ldifFile'       : '%s/backends/ExportTasks18.ldif' % remote.temp
            }
          </call>

          <message>
            'Backend ExportTasks18: Export the data  by scheduling a task , include branch cn=QA Managers,ou=Groups,dc=example,dc=com  and append'
          </message>

          <call function="'exportLdifWithScript'">
            {
              'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeBranches' :  ["cn=QA Managers,ou=Groups,dc=example,dc=com"],
              'ldifFile'       : '%s/backends/ExportTasks18.ldif' % remote.temp,
              'append'      : 'True'
            }
          </call>

          <message>
            'Backend ExportTasks18:Check no diff'
          </message>
          <call function="'LdifDiffWithScript'">
           {
            'sourceLdif' : '%s/backends/export_tasks_ldif/Append.ref' % remote.data,
            'targetLdif' : '%s/backends/ExportTasks18.ldif' % remote.temp,
            'outputLdif' : '%s/backends/ExportTasks18.out' % remote.temp
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Compress LDIF
    #@TestID              Compress LDIF
    #@TestPurpose         Verify an export task where the LDIF file is compressed.
    #@TestPreamble
   #@TestSteps           Client calls exportLDIF task with the included compressend branch and ldifFile.
                                    Delete the branch and test branch successfully deleted.
                                    Import the exported compressed ldif.
                                    Check branch exists.
                                    
    #@TestPostamble
    #@TestResult Success if  exportLDIF task and Import return 0
  -->

  <function name="backends_export_tasks_019" scope="local">

    <testcase name="getTestCaseName('LDIF Compressed')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
           'Backend ExportTasks19: Export the data  by scheduling a task and compress'
          </message>

          <call function="'exportLdifWithScript'">
            {
              'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeBranches' :  ["ou=people,dc=example,dc=com"],
              'isCompressed' : 'True',
              'ldifFile'       : '%s/backends/ExportTasks19.ldif.gz' % remote.temp
            }
          </call>

          <message>
           'Backend ExportTasks19: Delete the branch ou=people,dc=example,dc=com'
          </message>
          
          <call function="'ldapDeleteWithScript'">
            {
              'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
              'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
              'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
              'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
              'dsDeleteSubtree'  : 'TRUE' ,
              'dsDn'             : ['ou=people,dc=example,dc=com']
            }
          </call>

          <message>
           'Backend ExportTasks19: Check branch successfully deleted'
          </message>

          <call function="'ldapSearchWithScript'">
            {
              'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
              'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
              'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
              'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
              'dsCountEntries'   : 'True' ,
              'dsBaseDN'         : 'ou=people,dc=example,dc=com',
              'dsFilter'         : 'objectClass=*',
              'expectedRC'       : 32
            }
          </call>
          
          <message>
           'Backend ExportTasks19: Import the compressed ldif in default backend'
          </message>

          <call function="'StopDsWithScript'"/>

          <call function="'ImportLdifWithScript'">
            {
              'ldifFile'      : '%s/backends/ExportTasks19.ldif.gz' % remote.temp,
              'backEnd'       : DIRECTORY_INSTANCE_BE,
              'append'        : ' ',
              'isCompressed'  : 'True'
            }
          </call>

          <call function="'StartDsWithScript'"/>

          <!--- Check that DS started -->
          <call function="'isAlive'">
            { 'noOfLoops'        : 10 ,
              'noOfMilliSeconds' : 2000
            }
          </call>

          <message>
           'Backend ExportTasks19: Count entries in subtree ou=people,dc=example,dc=com'
          </message>

          <call function="'ldapSearchWithScript'">
          {
            'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
            'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
            'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
            'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
            'dsCountEntries'   : 'True' ,
            'dsBaseDN'         : 'ou=people,dc=example,dc=com',
            'dsFilter'         : 'objectClass=*'
          }
          </call>

          <script>
            returnString = STAXResult[0][1]
          </script>

          <call function="'checktestString'">
            {
            'returnString'     : returnString ,
            'expectedString'   : 'Total number of matching entries: 151'
            }
          </call>
          
          
        </sequence>


        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>


<!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Wrap Column
    #@TestID              Wrap Column
    #@TestPurpose         Verify an export task of a LDIF file containing wrapped columns
    #@TestPreamble
    #@TestSteps            Client calls exportLDIF task with the wrapped columns length, and ldifFile.
                                     Client calls exportLDIF task with an other included branch, append to the first ldif file.
                                    Make ldifDIFF between output file and export_tasks_ldif/Include_Branch_Wrap.ref.
    #@TestPostamble
    #@TestResult
  -->

  <function name="backends_export_tasks_020" scope="local">

    <testcase name="getTestCaseName('Wrapped Columns')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <message>
            'Backend ExportTasks20: Export the data  by scheduling a task and wrapped length to 30 '
          </message>

          <call function="'exportLdifWithScript'">
            {
              'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'includeBranches' :  ["ou=Groups,dc=example,dc=com"],
              'wrapColumn'  : 30,
              'ldifFile'       : '%s/backends/ExportTasks20.ldif' % remote.temp
            }
          </call>

          <message>
            'Backend ExportTasks20: Check no diff'
          </message>

          <call function="'LdifDiffWithScript'">
            {
            'sourceLdif' : '%s/backends/export_tasks_ldif/Include_Branch_Wrap.ref' % remote.data,
            'targetLdif' : '%s/backends/ExportTasks20.ldif' % remote.temp,
            'outputLdif' : '%s/backends/ExportTasks20.out' % remote.temp
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>

        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>

      </try>
    </testcase>
  </function>
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Encrypt LDIF
    #@TestID              Encrypt LDIF
    #@TestPurpose         Verify an export task where the LDIF file is encrypted.
    #@TestPreamble
    #@TestSteps
    #@TestPostamble
    #@TestResult
  -->
  
  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Hash Signed LDIF
    #@TestID              Hash Signed LDIF
    #@TestPurpose         Verify an export task where the LDIF file is hashed/signed.
    #@TestPreamble
    #@TestSteps
    #@TestPostamble
    #@TestResult
  -->

  <!--- Test Case information
    #@TestMarker          Backend Export Tasks Tests
    #@TestName            Export Tasks: Error Codes
    #@TestID              Error Codes
    #@TestPurpose         Verify an export task fails with an error code.
    #@TestPreamble
    #@TestSteps
    #@TestPostamble
    #@TestResult
  -->

</stax>
