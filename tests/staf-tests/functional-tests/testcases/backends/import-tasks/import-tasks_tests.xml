<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2009-2010 Sun Microsystems, Inc.
 !      Portions Copyright 2011 ForgeRock AS.
 ! -->

<stax>

  <!--- Test Case information
    #@TestMarker          Backend Import Tasks Tests
    #@TestName            Import Tasks: LDIF Default
    #@TestID              LDIF Default
    #@TestPurpose         Verify an import task of a LDIF file using the default backend.
    #@TestPreamble
    #@TestSteps           
    #@TestPostamble
    #@TestResult
  -->

  <function name="backends_import_tasks_001" scope="local">

    <testcase name="getTestCaseName('LDIF Default')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'       : '%s/backends/Example.ldif' % remote.data
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller, ou=People, dc=example,dc=com',
                                   'uid=rhunt, ou=People, dc=example,dc=com'],
               'startDS'        : 'no' 
             }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>

    <!--- Test Case information
    #@TestMarker          Backend Import TasksTests
    #@TestName            Backend: Import Tasks: LDIF Non Default
    #@TestID              LDIF Non Default
    #@TestPurpose         Verify an import task of a LDIF file using a differrent backend to the default.
    #@TestPreamble
    #@TestSteps           ./import-ldif.sh -n "nonDefault" -l ../ldif/Example.ldif
    #@TestPostamble
    #@TestResult
    -->

  <function name="backends_import_tasks_002" scope="local">

    <testcase name="getTestCaseName('LDIF Non Default')">

      <try>
  
        <sequence>

          <call function="'testCase_Preamble'"/>

          <script>
            options=[]
            options.append('--backend-name "nonDefault"')
            options.append('--set base-dn:"dc=non-default,dc=com"')
            options.append('--set enabled:true')
            options.append('--set writability-mode:enabled')
            options.append('-t local-db')
            createBackendOptions=' '.join(options)
          </script>

          <call function="'dsconfig'">
            { 'subcommand'     : 'create-backend',
              'optionsString'  : createBackendOptions
            }
          </call>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'       : '%s/backends/nonDefault.ldif' % remote.data,
              'backEnd'        : 'nonDefault'
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=non-default,dc=com',
                                   'uid=dmiller, ou=People, dc=non-default,dc=com',
                                   'uid=rhunt, ou=People, dc=non-default,dc=com'] ,
               'startDS'        : 'no'
            }
          </call>

        </sequence>
  
        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
  
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Include Branch
      #@TestID              Fractional Include Branch
      #@TestPurpose         Verify an import task of a LDIF file specifying a branch that should be included in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_003" scope="local">

    <testcase name="getTestCaseName('Fractional Include Branch')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Include.ldif' % remote.data,
              'includeBranches' : ['dc=com'],
            }
          </call>
          
          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller, ou=People, dc=example,dc=com',
                                   'uid=rhunt, ou=People, dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Include Branches
      #@TestID              Fractional Include Branches
      #@TestPurpose         Verify an import task of a LDIF file specifying multiple branches that should be included in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_004" scope="local">

    <testcase name="getTestCaseName('Fractional Include Branches')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Include.ldif' % remote.data,
              'includeBranches' : ['dc=com','dc=example,dc=com']
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller, ou=People, dc=example,dc=com',
                                   'uid=rhunt, ou=People, dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>
      
    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Exclude Branch
      #@TestID              Fractional Exclude Branch
      #@TestPurpose         Verify an import task of a LDIF file specifying a branch that should be excluded in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_005" scope="local">

    <testcase name="getTestCaseName('Fractional Exclude Branch')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'" />

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'taskID'          : STAXCurrentTestcase,
              'ldifFile'        : '%s/backends/Exclude.ldif' % remote.data,
              'excludeBranches' : ['ou=Departed,ou=People,dc=example,dc=com'],
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller, ou=People, dc=example,dc=com',
                                   'uid=rhunt, ou=People, dc=example,dc=com'],
              'missingEntries'  : ['uid=fvinker,ou=Departed,ou=People,dc=example,dc=com',
                                   'uid=brammage,ou=Departed,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Exclude Branches
      #@TestID              Fractional Exclude Branches
      #@TestPurpose         Verify an import task of a LDIF file specifying multiple branches that should be excluded in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_006" scope="local">

    <testcase name="getTestCaseName('Fractional Exclude Branches')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'" />

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'taskID'          : STAXCurrentTestcase,
              'ldifFile'        : '%s/backends/Exclude.ldif' % remote.data,
              'excludeBranches' : ['ou=Departed,ou=People,dc=example,dc=com',
                                   'cn=QA Managers,ou=groups,dc=example,dc=com']
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller, ou=People, dc=example,dc=com',
                                   'uid=rhunt, ou=People, dc=example,dc=com'],
              'missingEntries'  : ['uid=fvinker,ou=Departed,ou=People,dc=example,dc=com',
                                   'uid=brammage,ou=Departed,ou=People,dc=example,dc=com',
                                   'uid=bbaret,cn=QA Managers,ou=groups,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Branches Mix
      #@TestID              Fractional Branches Mix
      #@TestPurpose         Verify an import task of a LDIF file specifying a mix of include and exclude branches.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_007" scope="local">

    <testcase name="getTestCaseName('Fractional Branches Mix')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Exclude.ldif' % remote.data,
              'includeBranches' : ['dc=com'],
              'excludeBranches' : ['ou=Departed,ou=People,dc=example,dc=com'],
            }
          </call>
          
          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller, ou=People, dc=example,dc=com',
                                   'uid=rhunt, ou=People, dc=example,dc=com'],
              'missingEntries'  : ['uid=fvinker,ou=Departed,ou=People,dc=example,dc=com',
                                   'uid=brammage,ou=Departed,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>
          
        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Include Attribute
      #@TestID              Fractional Include Attribute
      #@TestPurpose         Verify an import task of a LDIF file specifying an attribute that should be included in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_008" scope="local">

    <testcase name="getTestCaseName('Fractional Include Attribute')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'" />

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'    : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'      : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'    : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'          : '%s/backends/Include.ldif' % remote.data,
              'includeAttributes' : ['dc'],
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['dc=com','dc=example,dc=com','ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Include Attributes
      #@TestID              Fractional Include Attributes
      #@TestPurpose         Verify an import task of a LDIF file specifying multiple attributes that should be included in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_009" scope="local">

    <testcase name="getTestCaseName('Fractional Include Attributes')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'" />

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Include.ldif' % remote.data,
              'includeAttributes' : ['dc','cn','ou','sn']
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>            

    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Exclude Attribute
      #@TestID              Fractional Exclude Attribute
      #@TestPurpose         Verify an import task of a LDIF file specifying an attribute that should be excluded in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_010" scope="local">

    <testcase name="getTestCaseName('Fractional Exclude Attribute')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'" />

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'    : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'      : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'    : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'          : '%s/backends/Exclude.ldif' % remote.data,
              'excludeAttributes' : ['userpassword']
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries'   : ['uid=scarter,ou=People,dc=example,dc=com'],
              'missingAttributes' : ['userpassword'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Exclude Attributes
      #@TestID              Fractional Exclude Attributes
      #@TestPurpose         Verify an import task of a LDIF file specifying multiple attribute that should be excluded in the import.
      #@TestPreamble
      #@TestSteps           
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_011" scope="local">

    <testcase name="getTestCaseName('Fractional Exclude Attributes')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'" />

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'    : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'      : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'    : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'          : '%s/backends/Exclude.ldif' % remote.data,
              'excludeAttributes' : ['userpassword','mail','roomnumber']
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries'   : ['uid=scarter,ou=People,dc=example,dc=com'],
              'missingAttributes' : ['userpassword','mail','roomnumber'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Mix
      #@TestID              Fractional Mix
      #@TestPurpose         Verify an import task of a LDIF file specifying a mix of fractional attributes and branches.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_012" scope="local">

    <testcase name="getTestCaseName('Fractional Mix')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'" />

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'    : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'      : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'    : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'          : '%s/backends/Exclude.ldif' % remote.data,
              'includeBranches'   : ['dc=com','dc=example,dc=com','ou=People,dc=example,dc=com'],
              'excludeBranches'   : ['ou=Departed,ou=People,dc=example,dc=com'],
              'includeAttributes' : ['dc','cn','ou','sn'],
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller, ou=People, dc=example,dc=com',
                                   'uid=rhunt, ou=People, dc=example,dc=com'],
              'missingEntries'  : ['uid=fvinker,ou=Departed,ou=People,dc=example,dc=com',
                                   'uid=brammage,ou=Departed,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Filtered Include
      #@TestID              Filtered Include
      #@TestPurpose         Verify an import task of a LDIF file specifying a search filter control which entries are included in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_013" scope="local">

    <testcase name="getTestCaseName('Filtered Include')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'" />

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
             'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Include.ldif' % remote.data,
              'includeFilters'  : ['objectclass=*'],
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Filtered Exclude
      #@TestID              Filtered Exclude
      #@TestPurpose         Verify an import task of a LDIF file specifying a search filter control which entries are excluded in the import.
      #@TestPreamble
      #@TestSteps           
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_014" scope="local">

    <testcase name="getTestCaseName('Filtered Exclude')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Exclude.ldif' % remote.data,
              'excludeFilters'  : ['objectclass=person'],
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['dc=example,dc=com',
                                   'ou=People,dc=example,dc=com'],
              'missingEntries'  : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Filtered Includes
      #@TestID              Filtered Includes
      #@TestPurpose         Verify an import task of a LDIF file specifying multiple search filters control which entries are included in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_015" scope="local">

    <testcase name="getTestCaseName('Filtered Includes')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Include.ldif' % remote.data,
              'includeFilters'  : ['objectclass=domain*','objectclass=organizationalunit']
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['dc=example,dc=com',
                                   'ou=People,dc=example,dc=com'],
              'missingEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                  'uid=dmiller,ou=People,dc=example,dc=com',
                                  'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>            

    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Filtered Excludes
      #@TestID              Filtered Excludes
      #@TestPurpose         Verify an import task of a LDIF file specifying multiple search filters control which entries are excluded in the import.
      #@TestPreamble
      #@TestSteps           
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_016" scope="local">

    <testcase name="getTestCaseName('Filtered Excludes')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Exclude.ldif' % remote.data,
              'excludeFilters'  : ['objectclass=person','objectclass=organizationalunit'],
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['dc=example,dc=com'],
              'missingEntries'  : ['ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Filtered Includes Complex
      #@TestID              Filtered Includes Complex
      #@TestPurpose         Verify an import task of a LDIF file specifying complex search filters control which entries are included in the import.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_017" scope="local">

    <testcase name="getTestCaseName('Filtered Includes Complex')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Include.ldif' % remote.data,
              'includeFilters'  : ['|(objectclass=person)(objectclass=domain)(objectclass=organizationalunit)'],
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Filtered Excludes Complex
      #@TestID              Filtered Excludes Complex
      #@TestPurpose         Verify an import task of a LDIF file specifying complex search filters control which entries are excluded in the import.
      #@TestPreamble
      #@TestSteps           
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_018" scope="local">

    <testcase name="getTestCaseName('Filtered Excludes Complex')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'  : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'        : '%s/backends/Exclude.ldif' % remote.data,
              'excludeFilters'  : ['&amp;(objectclass=person)(ou=Departed)'],
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=rhunt,ou=People,dc=example,dc=com'],
              'missingEntries'  : ['uid=fvinker,ou=Departed,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Fractional Filtered Mix
      #@TestID              Fractional Filtered Mix
      #@TestPurpose         Verify an import task of a LDIF file specifying a mix of fractional and filtered.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_019" scope="local">

    <testcase name="getTestCaseName('Fractional Filtered Mix')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'    : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'      : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'    : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'          : '%s/backends/Exclude.ldif' % remote.data,
              'excludeFilters'    : ['&amp;(objectclass=person)(ou=Departed)'],
              'includeBranches'   : ['dc=com'],
              'excludeAttributes' : ['userpassword']
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries'   : ['uid=scarter,ou=People,dc=example,dc=com'],
              'missingAttributes' : ['userpassword'],
              'startDS'           : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Append
      #@TestID              Append
      #@TestPurpose         Verify an import task of a LDIF file specifying that the import process should append to the existing database.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_020" scope="local">

    <testcase name="getTestCaseName('Append')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <!-- Import Example.ldif -->
          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'         : DIRECTORY_INSTANCE_HOST,
                'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
                'dsInstanceDn'         : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd'       : DIRECTORY_INSTANCE_PSWD,
                'ldifFile'             : '%s/backends/Example.ldif' % remote.data,
                'backEnd'              : DIRECTORY_INSTANCE_BE
            }
          </call>

          <!-- Import Example.ldif -->                                                                                           
          <call function="'ImportLdifWithScript'">
              { 'dsInstanceHost'       : DIRECTORY_INSTANCE_HOST,
                'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
                'dsInstanceDn'         : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd'       : DIRECTORY_INSTANCE_PSWD,
                'ldifFile'             : '%s/backends/Append.ldif' % remote.data,
                'append'               : 'TRUE'
              }
          </call>

          <call function="'checkImport'">
            {  'dsBaseDN'          : 'dc=example,dc=com',
               'expectedEntries'  : ['ou=Departed,ou=People,dc=example,dc=com',
                                    'uid=fvinker,ou=Departed,ou=People,dc=example,dc=com',
                                    'uid=brammage,ou=Departed,ou=People,dc=example,dc=com'] ,
               'expectedNoEntries' : '163' ,
               'startDS'           : 'no'
            }                        
          </call>
          
        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks:Append Replace Existing
      #@TestID              Append Replace Existing
      #@TestPurpose         Verify an import task of a LDIF file specifying that an existing entry should be replaced when appending to an existing database.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_021" scope="local">

    <testcase name="getTestCaseName('Append Replace Existing')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <!-- Import Example.ldif -->
          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'         : DIRECTORY_INSTANCE_HOST,
                'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
                'dsInstanceDn'         : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd'       : DIRECTORY_INSTANCE_PSWD,
                'ldifFile'             : '%s/backends/Example.ldif' % remote.data,
                'backEnd'              : DIRECTORY_INSTANCE_BE
            }
          </call>

          <!-- Import Example.ldif -->                                                                                           
          <call function="'ImportLdifWithScript'">
              { 'dsInstanceHost'       : DIRECTORY_INSTANCE_HOST,
                'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
                'dsInstanceDn'         : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd'       : DIRECTORY_INSTANCE_PSWD,
                'ldifFile'             : '%s/backends/Append.ldif' % remote.data,
                'append'               : 'TRUE',
                'replaceExisting'      : 'TRUE'
              }
          </call>

          <call function="'checkImport'">
            {  'dsBaseDN'          : 'dc=example,dc=com',
               'expectedEntries'  : ['ou=Departed,ou=People,dc=example,dc=com',
                                    'uid=fvinker,ou=Departed,ou=People,dc=example,dc=com',
                                    'uid=brammage,ou=Departed,ou=People,dc=example,dc=com'] ,
               'expectedNoEntries' : '163' ,
               'startDS'           : 'no'
            }                        
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Compressed
      #@TestID              Compressed
      #@TestPurpose         Verify an import task of a LDIF file specifying the data to import is compressed.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_022" scope="local">

    <testcase name="getTestCaseName('Compressed')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'       : '%s/backends/Example.ldif.gz' % remote.data,
              'isCompressed'   : 'TRUE'
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>

    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Encrypted
      #@TestID              Encrypted
      #@TestPurpose         Verify an import task of a LDIF file specifying the data to import is encrypted.
      #@TestPreamble
      #@TestSteps           
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_023" scope="local">
            
    <testcase name="getTestCaseName('Encrypted')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
               'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'       : '%s/backends/Example.ldif' % remote.data,
              'isEncrypted'    : 'TRUE'
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

          <call function="'checktestRC'">
            { 'returncode' : 1 ,
              'expected'   : 0 ,
              'result'     : 'Encrypted LDIF export is not implemented',
              'issue'      : 'OPENDJ-448'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Hashed Signed
      #@TestID              Hashed Signed
      #@TestPurpose         Verify an import task of a LDIF file specifying the data to import is hashed/signed.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_024" scope="local">

    <testcase name="getTestCaseName('Signed Hash')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'       : '%s/backends/Example.ldif' % remote.data,
              'isEncrypted'    : 'TRUE'
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>
  
          <call function="'checktestRC'">
            { 'returncode' : 1 ,
              'expected'   : 0 ,
              'result'     : 'Signed Hash import is not implemented',
              'issue'      : 'OPENDJ-448'
            }
          </call>
  
        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>            

    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Rejects File
      #@TestID              Rejects File
      #@TestPurpose         Verify an import task of a LDIF file specifying the a path to a file into which rejected entries may be written if they are not accepted during the import process, when the rejects file is not overwritten.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_025" scope="local">

    <testcase name="getTestCaseName('Rejects File')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost' : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort' : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'   : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'       : '%s/backends/Example.ldif' % remote.data,
              'rejectFile'     : '%s/backends/import_tasks_025-rejects.txt' % remote.temp
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>
          <!-- Should check there is a rejects file and the contents are correct -->

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Rejects File Overwrite
      #@TestID              Rejects File Overwrite
      #@TestPurpose         Verify an import task of a LDIF file specifying the a path to a file into which rejected entries may be written if they are not accepted during the import process, when the rejects file is overwritten.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_026" scope="local">

    <testcase name="getTestCaseName('Overwrite Rejects File')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'       : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'         : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'       : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'             : '%s/backends/Example.ldif' % remote.data,
              'rejectFile'           : '%s/backends/import_tasks_026-rejects.txt' % remote.temp,
              'overwriteFile'        : 'TRUE'
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=rhunt,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>
          <!-- Should check there is a rejects file and the contents are correct -->

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Skip Schema Validation Accept
      #@TestID              Skip Schema Validation Accept
      #@TestPurpose         Verify an import task of a LDIF file containing invalided schema is accepted when skip schema validation is specified
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_027" scope="local">

    <testcase name="getTestCaseName('Skip Schema Validation Accept')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'       : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'  : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'         : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'       : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'             : '%s/backends/Schema.ldif' % remote.data,
              'skipSchemaValidation' : 'TRUE'
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=dmiller,ou=People,dc=example,dc=com',
                                   'uid=kwinters,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
              
    <!--- Test Case information
      #@TestMarker          Backend Import Tasks Tests
      #@TestName            Backend: Import Tasks: Skip Schema Validation Reject
      #@TestID              Skip Schema Validation Reject
      #@TestPurpose         Verify an import task of a LDIF file containing invalid schema is rejected when skip schema validation is not specified
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
    -->

  <function name="backends_import_tasks_028" scope="local">

    <testcase name="getTestCaseName('Skip Schema Validation Reject')">

      <try>

        <sequence>

          <call function="'testCase_Preamble'"/>

          <call function="'ImportLdifWithScript'">
            { 'dsInstanceHost'       : DIRECTORY_INSTANCE_HOST,
              'dsInstanceAdminPort'   : DIRECTORY_INSTANCE_ADMIN_PORT,
              'dsInstanceDn'         : DIRECTORY_INSTANCE_DN,
              'dsInstancePswd'       : DIRECTORY_INSTANCE_PSWD,
              'ldifFile'                         : '%s/backends/Schema.ldif' % remote.data
            }
          </call>

          <call function="'checkImport'">
            { 'expectedEntries' : ['uid=dmiller,ou=People,dc=example,dc=com'],
              'missingEntries'  : ['uid=scarter,ou=People,dc=example,dc=com',
                                   'uid=kwinters,ou=People,dc=example,dc=com'],
              'startDS'         : 'no'
            }
          </call>

        </sequence>

        <catch exception="'STAXException.*'" typevar="eType" var="eInfo">
          <message log="1" level="'fatal'">
            '%s: Test failed. eInfo(%s)' % (eType,eInfo)
          </message>
        </catch>
  
        <finally>
          <call function="'testCase_Postamble'"/>
        </finally>        

      </try>

    </testcase>

  </function>
            
    <!--- Test Case information
          #@TestMarker          Backend Import Tasks Tests
          #@TestName            Backend: Import Tasks: Error Codes
          #@TestID              Error Codes
          #@TestPurpose         Verify an import task fails with an error code.
          #@TestPreamble
          #@TestSteps
          #@TestPostamble
          #@TestResult
    -->
    <!-- Need to know what the error codes are -->

</stax>
