user-friendly-name=Root
user-friendly-plural-name=Roots
synopsis=The root configuration provides an entry point to the rest of the OpenDJ configuration.
tag.core-server.synopsis=Core server
tag.database.synopsis=Caching and back-ends
tag.logging.synopsis=Logging
tag.replication.synopsis=\u8907\u88fd
tag.security.synopsis=Authentication and authorization
tag.user-management.synopsis=User management
relation.access-control-handler.user-friendly-name=Access Control Handler
relation.access-control-handler.synopsis=Access Control Handlers manage the application-wide access control. The OpenDJ access control handler is defined through an extensible interface, so that alternate implementations can be created. Only one access control handler may be active in the server at any given time.
relation.access-control-handler.description=Note that OpenDJ also has a privilege subsystem, which may have an impact on what clients may be allowed to do in the server. For example, any user with the bypass-acl privilege is not subject to access control checking regardless of whether the access control implementation is enabled.
relation.account-status-notification-handler.user-friendly-name=Account Status Notification Handler
relation.account-status-notification-handler.user-friendly-plural-name=Account Status Notification Handlers
relation.account-status-notification-handler.synopsis=Account Status Notification Handlers are invoked to provide notification to users in some form (for example, by an email message) when the status of a user's account has changed in some way. The Account Status Notification Handler can be used to notify the user and/or administrators of the change.
relation.administration-connector.user-friendly-name=Administration Connector
relation.administration-connector.synopsis=The Administration Connector is used to interact with administration tools using LDAP.
relation.administration-connector.description=It is a dedicated entry point for administration.
relation.alert-handler.user-friendly-name=Alert Handler
relation.alert-handler.user-friendly-plural-name=Alert Handlers
relation.alert-handler.synopsis=Alert Handlers are used to notify administrators of significant problems or notable events that occur in the Directory Server.
relation.attribute-syntax.user-friendly-name=Attribute Syntax
relation.attribute-syntax.user-friendly-plural-name=Attribute Syntaxes
relation.attribute-syntax.synopsis=Attribute Syntaxes define the type of data that may be stored in an attribute with that syntax. A syntax is generally associated with a set of matching rules that indicate how to perform matching operations against values of that syntax.
relation.backend.user-friendly-name=Backend
relation.backend.user-friendly-plural-name=Backends
relation.backend.synopsis=Backends are responsible for providing access to the underlying data presented by the server.
relation.backend.description=The data may be stored locally in an embedded database, remotely in an external system, or generated on the fly (for example, calculated from other information that is available).
relation.certificate-mapper.user-friendly-name=Certificate Mapper
relation.certificate-mapper.user-friendly-plural-name=Certificate Mappers
relation.certificate-mapper.synopsis=Certificate Mappers are responsible for establishing a mapping between a client certificate and the entry for the user that corresponds to that certificate.
relation.connection-handler.user-friendly-name=Connection Handler
relation.connection-handler.user-friendly-plural-name=\u9023\u7dda\u8655\u7406\u7a0b\u5f0f
relation.connection-handler.synopsis=Connection Handlers are responsible for handling all interaction with the clients, including accepting the connections, reading requests, and sending responses.
relation.crypto-manager.user-friendly-name=Crypto Manager
relation.crypto-manager.synopsis=The Crypto Manager provides a common interface for performing compression, decompression, hashing, encryption and other kinds of cryptographic operations.
relation.entry-cache.user-friendly-name=Entry Cache
relation.entry-cache.user-friendly-plural-name=Entry Caches
relation.entry-cache.synopsis=Entry Caches are responsible for caching entries which are likely to be accessed by client applications in order to improve Directory Server performance.
relation.extended-operation-handler.user-friendly-name=Extended Operation Handler
relation.extended-operation-handler.user-friendly-plural-name=Extended Operation Handlers
relation.extended-operation-handler.synopsis=Extended Operation Handlers processes the different types of extended operations in the server.
relation.extension.user-friendly-name=Extension
relation.extension.user-friendly-plural-name=Extensions
relation.extension.synopsis=The Extension allows to extend the configuration with new type of objects.
relation.extension.description=It is an entry point for extensions that requires configuration objects that does not inherit from an existing top-level object.
relation.global-configuration.user-friendly-name=Global Configuration
relation.global-configuration.synopsis=The Global contains properties that affect the overall operation of the OpenDJ.
relation.group-implementation.user-friendly-name=Group Implementation
relation.group-implementation.user-friendly-plural-name=Group Implementations
relation.group-implementation.synopsis=Group Implementations define named collections of users.
relation.group-implementation.description=Different group implementations may have different ways of determining membership. For example, some groups may explicitly list the members, and/or they may dynamically determine membership.
relation.identity-mapper.user-friendly-name=Identity Mapper
relation.identity-mapper.user-friendly-plural-name=Identity Mappers
relation.identity-mapper.synopsis=Identity Mappers are responsible for establishing a mapping between an identifier string provided by a client, and the entry for the user that corresponds to that identifier. Identity Mappers are used to process several SASL mechanisms to map an authorization ID (e.g., a Kerberos principal when using GSSAPI) to a directory user. They are also used when processing requests with the proxied authorization control.
relation.key-manager-provider.user-friendly-name=Key Manager Provider
relation.key-manager-provider.user-friendly-plural-name=Key Manager Providers
relation.key-manager-provider.synopsis=Key Manager Providers are responsible for managing the key material that is used to authenticate an SSL connection to its peer.
relation.key-manager-provider.description=Key Manager Providers essentially provide access to the certificate that is used by the server when performing SSL or StartTLS negotiation.
relation.log-publisher.user-friendly-name=Log Publisher
relation.log-publisher.user-friendly-plural-name=Log Publishers
relation.log-publisher.synopsis=Log Publishers are responsible for distributing log messages from different loggers to a destination.
relation.log-retention-policy.user-friendly-name=Log Retention Policy
relation.log-retention-policy.user-friendly-plural-name=Log Retention Policies
relation.log-retention-policy.synopsis=Log Retention Policies are used to specify when log files should be cleaned.
relation.log-rotation-policy.user-friendly-name=Log Rotation Policy
relation.log-rotation-policy.user-friendly-plural-name=Log Rotation Policies
relation.log-rotation-policy.synopsis=Log Rotation Policies are used to specify when log files should be rotated.
relation.matching-rule.user-friendly-name=Matching Rule
relation.matching-rule.user-friendly-plural-name=Matching Rules
relation.matching-rule.synopsis=Matching Rules define a set of rules for performing matching operations against assertion values.
relation.matching-rule.description=Matching rules are frequently associated with an attribute syntax and are used to compare values according to that syntax. For example, the distinguishedNameEqualityMatch matching rule can be used to determine whether two DNs are equal and can ignore unnecessary spaces around commas and equal signs, differences in capitalization in attribute names, an so on.
relation.monitor-provider.user-friendly-name=Monitor Provider
relation.monitor-provider.user-friendly-plural-name=Monitor Providers
relation.monitor-provider.synopsis=Monitor Providers can be used to provide information about the state of the server or one of its components.
relation.monitor-provider.description=This information is useful for monitoring or troubleshooting.
relation.network-group.user-friendly-name=Network Group
relation.network-group.user-friendly-plural-name=Network Groups
relation.network-group.synopsis=The Network Group is used to classify incoming connections and route requests to workflows.
relation.password-generator.user-friendly-name=Password Generator
relation.password-generator.user-friendly-plural-name=Password Generators
relation.password-generator.synopsis=Password Generators are used by the password modify extended operation to construct a new password for the user.
relation.password-generator.description=The server allows any number of password validators to be defined. This can impose any kinds of restrictions on the characteristics of valid passwords. Therefore, it is not feasible for the server to attempt to generate a password on its own that will meet all the requirements of all the validators. The password generator makes it possible to provide custom logic for creating a new password.
relation.password-policy.user-friendly-name=Password Policy
relation.password-policy.user-friendly-plural-name=Password Policies
relation.password-policy.synopsis=Password Policies define a number of password management rules, as well as requirements for authentication processing.
relation.password-storage-scheme.user-friendly-name=Password Storage Scheme
relation.password-storage-scheme.user-friendly-plural-name=Password Storage Schemes
relation.password-storage-scheme.synopsis=Password Storage Schemes encode new passwords provided by users so that they are stored in an encoded manner. This makes it difficult or impossible for someone to determine the clear-text passwords from the encoded values.
relation.password-storage-scheme.description=Password Storage Schemes also determine whether a clear-text password provided by a client matches the encoded value stored in the server.
relation.password-validator.user-friendly-name=Password Validator
relation.password-validator.user-friendly-plural-name=Password Validators
relation.password-validator.synopsis=Password Validators are responsible for determining whether a proposed password is acceptable for use and could include checks like ensuring it meets minimum length requirements, that it has an appropriate range of characters, or that it is not in the history.
relation.password-validator.description=The password policy for a user specifies the set of password validators that should be used whenever that user provides a new password. In order to activate a password validator, the corresponding configuration entry must be enabled, and the DN of that entry should be included in the password-validator attribute of the password policy in which you want that validator active. All password validator configuration entries must contain the password-validator structural objectclass.
relation.plugin-root.user-friendly-name=Plugin Root
relation.plugin-root.synopsis=The Plugin Root defines the parent entry for all plug-ins defined in the server.
relation.plugin-root.description=It can also include configuration attributes that define the order in which those plug-ins are to be loaded and invoked.
relation.root-dn.user-friendly-name=Root DN
relation.root-dn.synopsis=The Root DN configuration contains all the Root DN Users defined in the Directory Server. In addition, it also defines the default set of privileges that Root DN Users automatically inherit.
relation.root-dse-backend.user-friendly-name=Root DSE Backend
relation.root-dse-backend.synopsis=The Root DSE Backend contains the Directory Server root DSE.
relation.root-dse-backend.description=This is a special meta-backend that dynamically generates the root DSE entry for base-level searches and simply redirects to other backends for operations in other scopes.
relation.sasl-mechanism-handler.user-friendly-name=SASL Mechanism Handler
relation.sasl-mechanism-handler.user-friendly-plural-name=SASL Mechanism Handlers
relation.sasl-mechanism-handler.synopsis=The SASL mechanism handler configuration entry is the parent for all SASL mechanism handlers defined in the OpenDJ.
relation.sasl-mechanism-handler.description=SASL mechanism handlers are responsible for authenticating users during the course of processing a SASL (Simple Authentication and Security Layer, as defined in RFC 4422) bind.
relation.synchronization-provider.user-friendly-name=Synchronization Provider
relation.synchronization-provider.user-friendly-plural-name=Synchronization Providers
relation.synchronization-provider.synopsis=Synchronization Providers are responsible for handling synchronization of the Directory Server data with other OpenDJ instances or other data repositories.
relation.synchronization-provider.description=The OpenDJ takes a centralized approach to replication, rather than the point-to-point approach taken by Sun Java System Directory Server. In OpenDJ, one or more replication servers are created in the environment. The replication servers typically do not store user data but keep a log of all changes made within the topology. Each Directory Server instance in the topology is pointed at the replication servers. This plan simplifies the deployment and management of the environment. Although you can run the replication server on the same system (or even in the same instance) as the Directory Server, the two servers can be separated onto different systems. This approach can provide better performance or functionality in large environments.
relation.trust-manager-provider.user-friendly-name=Trust Manager Provider
relation.trust-manager-provider.user-friendly-plural-name=Trust Manager Providers
relation.trust-manager-provider.synopsis=Trust Manager Providers determine whether to trust presented certificates.
relation.virtual-attribute.user-friendly-name=Virtual Attribute
relation.virtual-attribute.user-friendly-plural-name=Virtual Attributes
relation.virtual-attribute.synopsis=Virtual Attributes are responsible for dynamically generating attribute values that appear in entries but are not persistently stored in the backend.
relation.virtual-attribute.description=Virtual attributes are associated with a virtual attribute provider, which contains the logic for generating the value.
relation.workflow.user-friendly-name=Workflow
relation.workflow.user-friendly-plural-name=Workflows
relation.workflow.synopsis=The Workflow is a list of processing steps (Work Flow Elements) that are applied to data as it is retrieved from the Directory Server.
relation.workflow-element.user-friendly-name=Workflow Element
relation.workflow-element.user-friendly-plural-name=Workflow Elements
relation.workflow-element.synopsis=Workflow Elements implement a single processing step in a Work Flow.
relation.workflow-element.description=A Workflow Element can perform a task such as mapping DNs, renaming attributes, filtering attributes, joining data sources, proxying, or load-balancing. The simplest Workflow Element is the Local Backend Work Flow Element, which routes data to a Backend.
relation.work-queue.user-friendly-name=Work Queue
relation.work-queue.synopsis=The Work Queue provides the configuration for the server work queue and is responsible for ensuring that requests received from clients are processed in a timely manner.
relation.work-queue.description=Only a single work queue can be defined in the server. Whenever a connection handler receives a client request, it should place the request in the work queue to be processed appropriately.
