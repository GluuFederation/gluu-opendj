user-friendly-name=Local DB Backend
user-friendly-plural-name=Local DB Backends
synopsis=The Local DB Backend uses the Berkeley DB Java Edition to store user-provided data in a local repository.
description=It is the traditional "directory server" backend and is similar to the backends provided by the Sun Java System Directory Server. The Local DB Backend stores the entries in an encoded form and also provides indexes that can be used to quickly locate target entries based on different kinds of criteria.
property.backend-id.synopsis=Specifies a name to identify the associated backend.
property.backend-id.description=The name must be unique among all backends in the server. The backend ID may not be altered after the backend is created in the server.
property.base-dn.synopsis=Specifies the base DN(s) for the data that the backend handles.
property.base-dn.description=A single backend may be responsible for one or more base DNs. Note that no two backends may have the same base DN although one backend may have a base DN that is below a base DN provided by another backend (similar to the use of sub-suffixes in the Sun Java System Directory Server). If any of the base DNs is subordinate to a base DN for another backend, then all base DNs for that backend must be subordinate to that same base DN.
property.base-dn.requires-admin-action.synopsis=No administrative action is required by default although some action may be required on a per-backend basis before the new base DN may be used.
property.compact-encoding.synopsis=Indicates whether the backend should use a compact form when encoding entries by compressing the attribute descriptions and object class sets.
property.compact-encoding.description=Note that this property applies only to the entries themselves and does not impact the index data.
property.compact-encoding.requires-admin-action.synopsis=Changes to this setting take effect only for writes that occur after the change is made. It is not retroactively applied to existing data.
property.db-cache-percent.synopsis=Specifies the percentage of JVM memory to allocate to the database cache.
property.db-cache-percent.description=Specifies the percentage of memory available to the JVM that should be used for caching database contents. Note that this is only used if the value of the db-cache-size property is set to "0 MB". Otherwise, the value of that property is used instead to control the cache size configuration.
property.db-cache-size.synopsis=The amount of JVM memory to allocate to the database cache.
property.db-cache-size.description=Specifies the amount of memory that should be used for caching database contents. A value of "0 MB" indicates that the db-cache-percent property should be used instead to specify the cache size.
property.db-checkpointer-bytes-interval.synopsis=Specifies the maximum number of bytes that may be written to the database before it is forced to perform a checkpoint.
property.db-checkpointer-bytes-interval.description=This can be used to bound the recovery time that may be required if the database environment is opened without having been properly closed. If this property is set to a non-zero value, the checkpointer wakeup interval is not used. To use time-based checkpointing, set this property to zero.
property.db-checkpointer-wakeup-interval.synopsis=Specifies the maximum length of time that may pass between checkpoints.
property.db-checkpointer-wakeup-interval.description=Note that this is only used if the value of the checkpointer bytes interval is zero.
property.db-cleaner-min-utilization.synopsis=Specifies the minimum percentage of "live" data that the database cleaner attempts to keep in database log files.
property.db-cleaner-min-utilization.description=If the amount of live data in any database log file drops below this percentage, then the cleaner moves the remaining live data in that file to the end of the database and deletes the original file in order to keep the database relatively compact.
property.db-directory.synopsis=Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend.
property.db-directory.description=The path may be either an absolute path or a path relative to the directory containing the base of the OpenDJ installation. The path may be any valid directory path in which the server has appropriate permissions to read and write files and has sufficient space to hold the database contents.
property.db-directory-permissions.synopsis=Specifies the permissions that should be applied to the directory containing the server database files.
property.db-directory-permissions.description=They should be expressed as three-digit octal values, which is the traditional representation for UNIX file permissions. The three digits represent the permissions that are available for the directory's owner, group members, and other users (in that order), and each digit is the octal representation of the read, write, and execute bits. Note that this only impacts permissions on the database directory and not on the files written into that directory. On UNIX systems, the user's umask controls permissions given to the database files.
property.db-directory-permissions.syntax.string.pattern.synopsis=Any octal value between 700 and 777 (the owner must always have read, write, and execute permissions on the directory).
property.db-evictor-lru-only.synopsis=Indicates whether the database should evict existing data from the cache based on an LRU policy (where the least recently used information will be evicted first).
property.db-evictor-lru-only.description=If set to "false", then the eviction keeps internal nodes of the underlying Btree in the cache over leaf notes, even if the leaf nodes have been accessed more recently. This may be a better configuration for databases in which only a very small portion of the data is cached.
property.db-evictor-nodes-per-scan.synopsis=Specifies the number of Btree nodes that should be evicted from the cache in a single pass if it is determined that it is necessary to free existing data in order to make room for new information.
property.db-evictor-nodes-per-scan.description=Changes to this property do not take effect until the backend is restarted. It is recommended that you also change this property when you set db-evictor-lru-only to false. This setting controls the number of Btree nodes that are considered, or sampled, each time a node is evicted. A setting of 10 often produces good results, but this may vary from application to application. The larger the nodes per scan, the more accurate the algorithm. However, setting it too high is detrimental; the need to consider larger numbers of nodes for each eviction may delay the completion of a given database operation, which will impact the response time of the application thread.
property.db-log-file-max.synopsis=Specifies the maximum size for a database log file.
property.db-logging-file-handler-on.synopsis=Indicates whether the database should maintain a je.info file in the same directory as the database log directory.
property.db-logging-file-handler-on.description=This file contains information about the internal processing performed by the underlying database.
property.db-logging-level.synopsis=Specifies the log level that should be used by the database when it is writing information into the je.info file.
property.db-logging-level.description=The database trace logging level is (in increasing order of verbosity) chosen from: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL.
property.db-num-cleaner-threads.synopsis=Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired utilization.
property.db-num-cleaner-threads.description=In environments with high write throughput, multiple cleaner threads may be required to maintain the desired utilization.
property.db-num-lock-tables.synopsis=Specifies the number of lock tables that are used by the underlying database.
property.db-num-lock-tables.description=This can be particularly important to help improve scalability by avoiding contention on systems with large numbers of CPUs. The value of this configuration property should be set to a prime number that is less than or equal to the number of worker threads configured for use in the server.
property.db-run-cleaner.synopsis=Indicates whether the database cleaner threads should be enabled.
property.db-run-cleaner.description=The cleaner threads are used to periodically compact the database by identifying database files with a low (that is, less than the amount specified by the db-cleaner-min-utilization property) percentage of live data, moving the remaining live data to the end of the log and deleting that file.
property.db-txn-no-sync.synopsis=Indicates whether database writes should be primarily written to an internal buffer but not immediately written to disk.
property.db-txn-no-sync.description=Setting the value of this configuration attribute to "true" may improve write performance but could cause the most recent changes to be lost if the OpenDJ or the underlying JVM exits abnormally, or if an OS or hardware failure occurs (a behavior similar to running with transaction durability disabled in the Sun Java System Directory Server).
property.db-txn-write-no-sync.synopsis=Indicates whether the database should synchronously flush data as it is written to disk.
property.db-txn-write-no-sync.description=If this value is set to "false", then all data written to disk is synchronously flushed to persistent storage and thereby providing full durability. If it is set to "true", then data may be cached for a period of time by the underlying operating system before actually being written to disk. This may improve performance, but could cause the most recent changes to be lost in the event of an underlying OS or hardware failure (but not in the case that the OpenDJ or the JVM exits abnormally).
property.enabled.synopsis=Indicates whether the backend is enabled in the server.
property.enabled.description=If a backend is not enabled, then its contents are not accessible when processing operations.
property.entries-compressed.synopsis=Indicates whether the backend should attempt to compress entries before storing them in the database.
property.entries-compressed.description=Note that this property applies only to the entries themselves and does not impact the index data. Further, the effectiveness of the compression is based on the type of data contained in the entry.
property.entries-compressed.requires-admin-action.synopsis=Changes to this setting take effect only for writes that occur after the change is made. It is not retroactively applied to existing data.
property.import-queue-size.synopsis=Specifies the size (in number of entries) of the queue that is used to hold the entries read during an LDIF import.
property.import-queue-size.requires-admin-action.synopsis=Changes do not take effect for any import that may already be in progress.
property.import-thread-count.synopsis=Specifies the number of threads that is used for concurrent processing during an LDIF import.
property.import-thread-count.description=This should generally be a small multiple (for example, 2x) of the number of CPUs in the system for a traditional system, or equal to the number of CPU strands for a CMT system.
property.import-thread-count.requires-admin-action.synopsis=Changes do not take effect for any import that may already be in progress.
property.index-entry-limit.synopsis=Specifies the maximum number of entries that is allowed to match a given index key before that particular index key is no longer maintained.
property.index-entry-limit.description=This property is analogous to the ALL IDs threshold in the Sun Java System Directory Server. Note that this is the default limit for the backend, and it may be overridden on a per-attribute basis.A value of 0 means there is no limit.
property.index-entry-limit.requires-admin-action.synopsis=If any index keys have already reached this limit, indexes need to be rebuilt before they are allowed to use the new limit.
property.java-class.synopsis=Specifies the fully-qualified name of the Java class that provides the backend implementation.
property.je-property.synopsis=Specifies the database and environment properties for the Berkeley DB Java Edition database serving the data for this backend.
property.je-property.description=Any Berkeley DB Java Edition property can be specified using the following form: property-name=property-value. Refer to OpenDJ documentation for further information on related properties, their implications, and range values. The definitive identification of all the property parameters is available in the example.properties file of Berkeley DB Java Edition distribution.
property.preload-time-limit.synopsis=Specifies the length of time that the backend is allowed to spend "pre-loading" data when it is initialized.
property.preload-time-limit.description=The pre-load process is used to pre-populate the database cache, so that it can be more quickly available when the server is processing requests. A duration of zero means there is no pre-load.
property.writability-mode.synopsis=Specifies the behavior that the backend should use when processing write operations.
property.writability-mode.syntax.enumeration.value.disabled.synopsis=Causes all write attempts to fail.
property.writability-mode.syntax.enumeration.value.enabled.synopsis=Allows write operations to be performed in that backend (if the requested operation is valid, the user has permission to perform the operation, the backend supports that type of write operation, and the global writability mode property is also enabled).
property.writability-mode.syntax.enumeration.value.internal-only.synopsis=Causes external write attempts to fail but allows writes by replication and internal operations.
relation.local-db-index.user-friendly-name=Local DB Index
relation.local-db-index.user-friendly-plural-name=Local DB Indexes
relation.local-db-index.synopsis=Local DB Indexes are used to store information that makes it possible to locate entries very quickly when processing search operations.
relation.local-db-index.description=Indexing is performed on a per-attribute level and different types of indexing may be performed for different kinds of attributes, based on how they are expected to be accessed during search operations.
relation.local-db-vlv-index.user-friendly-name=Local DB VLV Index
relation.local-db-vlv-index.user-friendly-plural-name=Local DB VLV Indexes
relation.local-db-vlv-index.synopsis=Local DB VLV Indexes are used to store information about a specific search request that makes it possible to efficiently process them using the VLV control.
relation.local-db-vlv-index.description=A VLV index effectively notifies the server that a virtual list view, with specific query and sort parameters, will be performed. This index also allows the server to collect and maintain the information required to make using the virtual list view faster.
