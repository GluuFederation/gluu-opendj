user-friendly-name=Pluggable Backend
user-friendly-plural-name=Pluggable Backends
synopsis=A Pluggable Backend stores application data in a pluggable database.
property.backend-id.synopsis=Specifies a name to identify the associated backend.
property.backend-id.description=The name must be unique among all backends in the server. The backend ID may not be altered after the backend is created in the server.
property.base-dn.synopsis=Specifies the base DN(s) for the data that the backend handles.
property.base-dn.description=A single backend may be responsible for one or more base DNs. Note that no two backends may have the same base DN although one backend may have a base DN that is below a base DN provided by another backend (similar to the use of sub-suffixes in the Sun Java System Directory Server). If any of the base DNs is subordinate to a base DN for another backend, then all base DNs for that backend must be subordinate to that same base DN.
property.base-dn.requires-admin-action.synopsis=No administrative action is required by default although some action may be required on a per-backend basis before the new base DN may be used.
property.compact-encoding.synopsis=Indicates whether the backend should use a compact form when encoding entries by compressing the attribute descriptions and object class sets.
property.compact-encoding.description=Note that this property applies only to the entries themselves and does not impact the index data.
property.compact-encoding.requires-admin-action.synopsis=Changes to this setting take effect only for writes that occur after the change is made. It is not retroactively applied to existing data.
property.enabled.synopsis=Indicates whether the backend is enabled in the server.
property.enabled.description=If a backend is not enabled, then its contents are not accessible when processing operations.
property.entries-compressed.synopsis=Indicates whether the backend should attempt to compress entries before storing them in the database.
property.entries-compressed.description=Note that this property applies only to the entries themselves and does not impact the index data. Further, the effectiveness of the compression is based on the type of data contained in the entry.
property.entries-compressed.requires-admin-action.synopsis=Changes to this setting take effect only for writes that occur after the change is made. It is not retroactively applied to existing data.
property.index-entry-limit.synopsis=Specifies the maximum number of entries that is allowed to match a given index key before that particular index key is no longer maintained.
property.index-entry-limit.description=This property is analogous to the ALL IDs threshold in the Sun Java System Directory Server. Note that this is the default limit for the backend, and it may be overridden on a per-attribute basis.A value of 0 means there is no limit.
property.index-entry-limit.requires-admin-action.synopsis=If any index keys have already reached this limit, indexes need to be rebuilt before they are allowed to use the new limit.
property.index-filter-analyzer-enabled.synopsis=Indicates whether to gather statistical information about the search filters processed by the directory server while evaluating the usage of indexes.
property.index-filter-analyzer-enabled.description=Analyzing indexes requires gathering search filter usage patterns from user requests, especially for values as specified in the filters and subsequently looking the status of those values into the index files. When a search requests is processed, internal or user generated, a first phase uses indexes to find potential entries to be returned. Depending on the search filter, if the index of one of the specified attributes matches too many entries (exceeds the index entry limit), the search becomes non-indexed. In any case, all entries thus gathered (or the entire DIT) are matched against the filter for actually returning the search result.
property.index-filter-analyzer-max-filters.synopsis=The maximum number of search filter statistics to keep.
property.index-filter-analyzer-max-filters.description=When the maximum number of search filter is reached, the least used one will be deleted.
property.java-class.synopsis=Specifies the fully-qualified name of the Java class that provides the backend implementation.
property.preload-time-limit.synopsis=Specifies the length of time that the backend is allowed to spend "pre-loading" data when it is initialized.
property.preload-time-limit.description=The pre-load process is used to pre-populate the database cache, so that it can be more quickly available when the server is processing requests. A duration of zero means there is no pre-load.
property.subordinate-indexes-enabled.synopsis=Indicates whether id2children and id2subtree indexes should be used for this backend. These indexes are used for constraining filtered searches to the search request's scope as well as for generating values for the hasSubordinates and numSubordinates virtual attributes.
property.subordinate-indexes-enabled.description=Subordinate indexing is enabled by default and should only be disabled for specialized use cases. A typical use case is where the backend is to be subjected to heavy add/delete load beneath the same parent entry such as when used as a session database. Disabling the subordinate indexes means that the numSubordinates and hasSubordinates virtual attributes will not be supported.
property.writability-mode.synopsis=Specifies the behavior that the backend should use when processing write operations.
property.writability-mode.syntax.enumeration.value.disabled.synopsis=Causes all write attempts to fail.
property.writability-mode.syntax.enumeration.value.enabled.synopsis=Allows write operations to be performed in that backend (if the requested operation is valid, the user has permission to perform the operation, the backend supports that type of write operation, and the global writability-mode property is also enabled).
property.writability-mode.syntax.enumeration.value.internal-only.synopsis=Causes external write attempts to fail but allows writes by replication and internal operations.
relation.backend-index.user-friendly-name=Backend Index
relation.backend-index.user-friendly-plural-name=Backend Indexes
relation.backend-index.synopsis=Backend Indexes are used to store information that makes it possible to locate entries very quickly when processing search operations.
relation.backend-index.description=Indexing is performed on a per-attribute level and different types of indexing may be performed for different kinds of attributes, based on how they are expected to be accessed during search operations.
relation.backend-vlv-index.user-friendly-name=Backend VLV Index
relation.backend-vlv-index.user-friendly-plural-name=Backend VLV Indexes
relation.backend-vlv-index.synopsis=Backend VLV Indexes are used to store information about a specific search request that makes it possible to efficiently process them using the VLV control.
relation.backend-vlv-index.description=A VLV index effectively notifies the server that a virtual list view, with specific query and sort parameters, will be performed. This index also allows the server to collect and maintain the information required to make using the virtual list view faster.
